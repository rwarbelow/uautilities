/// <reference types="cypress" />
export declare const getCurrentValue: ($trigger: JQuery<HTMLElement>) => Cypress.Chainable<JQuery<HTMLElement>>;
/**
 * A cypress helper to get a option based on it's index.
 * This helper yields the found option. It can be chanined with the `toggleOption` method.
 *
 * @example
 * ```ts
 *    cy.get('[data-testid="myTestId]')
 *      .then(getOptionByIndex(2))
 * ```
 */
export declare const getOptionByIndex: (index: number) => ($dropdown: JQuery<HTMLElement>) => Cypress.Chainable<JQuery<HTMLElement>>;
/**
 * A cypress helper to get a option based on it's label
 * This helper yields the found option. It can be chanined with the `toggleOption` method.
 *
 * @example
 * ```ts
 *    cy.get('[data-testid="myTestId]')
 *      .then(getOption('Option 1'))
 * ```
 */
export declare const getOption: (option: string) => ($dropdown: JQuery<HTMLElement>) => Cypress.Chainable<JQuery<HTMLLIElement>>;
/**
 * A cypress helper to toggle an option as checked or unchecked, based on it's current state
 * This helper yields the toggled option.
 *
 * @example
 * ```ts
 *    cy.get('[data-testid="myTestId]')
 *      .then(toggleOption('Option 1'))
 * ```
 */
export declare const toggleOption: (option: string | number) => ($dropdown: any) => void;
/**
 * A cypress helper to toggle a dropdown open or closed.
 * This helper yields the dropdown and can be chained with any other method.
 *
 * @example
 * ```ts
 *    cy.get('[data-testid="myTestId]')
 *      .then(toggleDropdown)
 *      .then(toggleOption('Option 2'))
 * ```
 */
export declare const toggleSelect: ($selectButton: any) => Cypress.Chainable<JQuery<any>>;
export declare const clickOutside: ($selectButton: any) => Cypress.Chainable<JQuery<any>>;
