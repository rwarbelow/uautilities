import * as React from 'react';
import classNames from 'classnames';
import { Tooltip } from '../Tooltip';
import { InfoCircle } from '../Icons';
import { AlignmentPositions } from '../../utilities/positionCalculator';
import { toggle, toggleActive, toggleWrapper, labelWrapper, additionalInfoIcon, } from './index.module.css.js';
export var Toggle = React.forwardRef(function (props, ref) {
    var _a;
    var className = props.className, disabled = props.disabled, label = props.label, additionalInfo = props.additionalInfo, hideLabel = props.hideLabel, onToggle = props.onToggle, testid = props.testid;
    var _b = React.useState(props.active), active = _b[0], setActive = _b[1];
    var tooltipId = additionalInfo && (label === null || label === void 0 ? void 0 : label.replace(' ', '-').toLowerCase()) + "-info";
    var handleToggle = function () {
        onToggle(!active);
        setActive(!active);
    };
    return (React.createElement("div", { className: toggleWrapper },
        !hideLabel && (React.createElement("div", { className: labelWrapper },
            React.createElement("span", { id: 'switch-label' }, label),
            additionalInfo && (React.createElement(Tooltip, { TooltipContent: additionalInfo, id: tooltipId, preferredPositions: [AlignmentPositions.topMiddle] },
                React.createElement(InfoCircle, { size: 24, "aria-label": 'More info', className: additionalInfoIcon }))))),
        React.createElement("button", { "aria-checked": active, "aria-label": hideLabel && label, "aria-labelledby": 'switch-label', "data-testid": testid || 'toggle', className: classNames(toggle, (_a = {}, _a[toggleActive] = active, _a), className), disabled: disabled, role: 'switch', onClick: handleToggle, ref: ref })));
});
Toggle.displayName = 'Toggle';
