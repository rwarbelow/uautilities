var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import DatePicker from 'react-datepicker';
import classNames from '../../utilities/classnames';
import { ErrorList } from '../ErrorList';
import { Calendar, InfoCircle } from '../Icons';
import { InputAddon } from '../InputAddon';
import { InputLabel } from '../InputLabel';
import { recessColors } from '../StyleGuide';
import { Tooltip } from '../Tooltip';
import { AlignmentPositions } from '../../utilities/positionCalculator';
import * as styles from './index.module.css.js';
var inputCounter = 0;
var DateInput = /** @class */ (function (_super) {
    __extends(DateInput, _super);
    function DateInput(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isFocused: false,
        };
        _this.handleCalendarButton = function () {
            _this.calendarRef.current.setOpen(true);
        };
        _this.handleFocus = function (event) {
            _this.setState({ isFocused: true });
            if (_this.props.onFocus) {
                _this.props.onFocus(event);
            }
        };
        _this.handleBlur = function (event) {
            _this.setState({ isFocused: false });
            if (_this.props.onBlur) {
                _this.props.onBlur(event);
            }
        };
        inputCounter += 1;
        _this.counter = inputCounter;
        _this.calendarRef = props.innerRef ? props.innerRef : React.createRef();
        return _this;
    }
    DateInput.prototype.getCounter = function () {
        return this.counter;
    };
    DateInput.prototype.render = function () {
        var _a, _b;
        /* eslint-disable @typescript-eslint/no-unused-vars */
        var _c = this.props, className = _c.className, disabled = _c.disabled, errors = _c.errors, hideLabel = _c.hideLabel, id = _c.id, isInvalid = _c.isInvalid, label = _c.label, onBlur = _c.onBlur, onFocus = _c.onFocus, placeholder = _c.placeholder, placeholderText = _c.placeholderText, testid = _c.testid, withIcon = _c.withIcon, additionalInfo = _c.additionalInfo, rest = __rest(_c, ["className", "disabled", "errors", "hideLabel", "id", "isInvalid", "label", "onBlur", "onFocus", "placeholder", "placeholderText", "testid", "withIcon", "additionalInfo"]);
        var inputId = id || "dateinput-" + this.getCounter();
        var errorList = errors ? (Array.isArray(errors) ? errors : [errors]) : [];
        var hasError = isInvalid || errorList.length > 0;
        var placeholderTxt = placeholder || placeholderText || 'MM/DD/YYYY';
        var tooltipId = additionalInfo && (label === null || label === void 0 ? void 0 : label.replace(' ', '-').toLowerCase()) + "-info";
        return (React.createElement("div", { "data-testid": testid, className: classNames(styles.dateInputWrapper, className) },
            React.createElement("div", { className: styles.labelWrapper },
                React.createElement(InputLabel, { className: classNames((_a = {}, _a[styles.hiddenLabel] = hideLabel, _a)), disabled: disabled, id: inputId, invalid: hasError, text: label }),
                additionalInfo && (React.createElement(Tooltip, { TooltipContent: additionalInfo, id: tooltipId, preferredPositions: [AlignmentPositions.topMiddle] },
                    React.createElement(InfoCircle, { size: 24, "aria-label": 'More info' })))),
            React.createElement(InputAddon, { testid: testid ? testid + "-addon" : undefined, focused: this.state.isFocused, hasErrors: hasError, prepend: withIcon && (React.createElement(Calendar, { "aria-label": 'Open Calendar', color: recessColors.teal.base, className: styles.dateInputCalendarButton, onClick: this.handleCalendarButton })) },
                React.createElement(DatePicker, __assign({ calendarClassName: 'dateInputPicker', className: classNames(styles.dateInput, (_b = {}, _b[styles.error] = hasError, _b)), disabled: disabled, id: inputId, onBlur: this.handleBlur, onFocus: this.handleFocus, placeholderText: placeholderTxt, ref: this.calendarRef }, rest))),
            React.createElement(ErrorList, { errors: errorList, show: errorList.length > 0, global: false })));
    };
    DateInput.defaultProps = {
        popperModifiers: {
            preventOverflow: {
                enabled: true,
                escapeWithReference: false,
                boundariesElement: 'viewport',
            },
        },
    };
    return DateInput;
}(React.PureComponent));
export default React.forwardRef(function (props, ref) { return (React.createElement(DateInput, __assign({ innerRef: ref }, props))); });
