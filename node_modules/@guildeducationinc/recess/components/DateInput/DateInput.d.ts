import * as React from 'react';
import DatePicker, { ReactDatePickerProps } from 'react-datepicker';
import { InputErrorProps } from '../../types/InputTypes';
export interface DateInputProps extends ReactDatePickerProps, InputErrorProps {
    /**
     * String specifying date format. Refer to date-fns docs for more details on formatting strings.
     *
     * @default MM/dd/yyyy
     */
    dateFormat?: string;
    /**
     * Whether input is disabled
     *
     * @default false
     */
    disabled?: boolean;
    /**
     * Use maxDate to restrict dates that can be selected
     *
     * @default null
     */
    maxDate?: Date | null;
    /**
     * Use startDate to select start date for a range
     *
     * @default null
     */
    startDate?: Date | null;
    /**
     * Use endDate to select end date for a range
     *
     * @default null
     */
    endDate?: Date | null;
    /**
     * Additional information that is displayed in a tooltip next to the input label.
     */
    additionalInfo?: React.ComponentType | string;
    /**
     * Controls whether or not the label is rendered.
     * You should still provide a value the `label` prop even if you don't want it to be rendered for accessibility reasons.
     * If `hideLabel` is true then the `aria-label` value on the input will be set to the value of the `label` prop.
     *
     * @default false
     */
    hideLabel?: boolean;
    /**
     * Removes input and only renders calendar select when true
     *
     * @default false
     */
    inline?: boolean;
    /**
     * Label for Date input. This value should always be provided for optimal
     * accessibility. You can use the `hideLabel` prop if you do not want label rendered.
     */
    label?: string;
    /**
     * Optional callback for when input is blurred
     */
    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;
    /**
     * Callback for when date is selected
     */
    onChange(date: Date | null, event: React.SyntheticEvent<any> | undefined): void;
    /**
     * Optional callback for when input is focused
     */
    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;
    /**
     * Placeholder string for date input
     *
     * @default MM/DD/YYYY
     */
    placeholder?: string;
    /**
     * Whether input value is required
     *
     * @default true
     */
    required?: boolean;
    /**
     * Current selected date
     */
    selected?: Date | null;
    /**
     * Whether time selection is displayed in date picker
     */
    showTimeSelect?: boolean;
    /**
     * Use minDate to restrict dates that can be selected
     *
     * @default null
     */
    minDate?: Date | null;
    testid?: string;
    /**
     * Controls whether calendar icon is appended to input.
     *
     * @default false
     */
    withIcon?: boolean;
    /**
     * Use a custom ref to be passed to the base input element.
     *
     */
    innerRef?: React.RefObject<DatePicker>;
}
declare const _default: React.ForwardRefExoticComponent<DateInputProps & React.RefAttributes<DatePicker>>;
export default _default;
