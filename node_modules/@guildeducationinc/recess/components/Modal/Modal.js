var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import * as ReactModal from 'react-modal';
import * as ReactDOM from 'react-dom';
import classNames from '../../utilities/classnames';
import * as styles from './index.module.css.js';
import confirm from './ConfirmModal';
// This method allows you to open a modal programmatically using Modal.open(yourProps)
// It is added to ModalComponent below
var openModal = function (_a) {
    var content = _a.content, modalProps = __rest(_a, ["content"]);
    var div = document.createElement('div');
    document.body.appendChild(div);
    var destroy = function () {
        var unmountResult = ReactDOM.unmountComponentAtNode(div);
        if (unmountResult && div.parentNode) {
            div.parentNode.removeChild(div);
        }
    };
    var render = function () {
        ReactDOM.render(React.createElement(ModalComponent, __assign({ isOpen: true, onClose: destroy }, modalProps), content), div);
    };
    render();
    // Return methods that you want available to your modal instance
    // Ex: const modal = Modal.open(yourProps); -> Programmatically close it using modal.close()
    return {
        close: destroy,
    };
};
var ModalComponent = /** @class */ (function (_super) {
    __extends(ModalComponent, _super);
    function ModalComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModalComponent.prototype.render = function () {
        var _a = this.props, _b = _a.appElement, appElement = _b === void 0 ? 'root' : _b, children = _a.children, _c = _a.className, className = _c === void 0 ? '' : _c, _d = _a.closable, closable = _d === void 0 ? true : _d, isFullScreen = _a.isFullScreen, isOpen = _a.isOpen, onClose = _a.onClose, _e = _a.overlayClassName, overlayClassName = _e === void 0 ? '' : _e, _f = _a.overlayClosable, overlayClosable = _f === void 0 ? true : _f, _g = _a.width, width = _g === void 0 ? 750 : _g;
        var closeButton = this.props.closeButton || (React.createElement("div", { className: styles.modalCloseButton },
            React.createElement("button", { onClick: function () { return onClose(); }, type: 'button', "aria-label": 'Close' }, "\u00D7")));
        return (React.createElement(ReactModal
        // This is needed so screen readers don't see main content when modal is opened.
        , { 
            // This is needed so screen readers don't see main content when modal is opened.
            appElement: document.getElementById(appElement) || document.body, ariaHideApp: false, className: classNames(styles.reactModalContent, isFullScreen ? styles.fullScreen : '', className), isOpen: isOpen, onRequestClose: function () { return onClose(); }, overlayClassName: classNames(styles.reactModalOverlay, overlayClassName), shouldCloseOnEsc: true, shouldCloseOnOverlayClick: overlayClosable, style: { content: { width: width } } },
            closable && closeButton,
            children));
    };
    return ModalComponent;
}(React.Component));
ModalComponent.open = openModal;
ModalComponent.confirm = confirm;
export var Modal = ModalComponent;
