var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import classnames from '../../utilities/classnames';
import * as styles from './index.module.css.js';
import { BaseButton } from './BaseButton';
import * as Icons from '../Icons';
import { ThemeContext } from '../Theme';
export var IconButton = React.forwardRef(function (props, ref) {
    var _a;
    var _b;
    var appearance = props.appearance, className = props.className, iconName = props.iconName, _c = props.size, size = _c === void 0 ? 24 : _c, _d = props.intent, intent = _d === void 0 ? 'default' : _d, theme = props.theme, label = props.label, rest = __rest(props, ["appearance", "className", "iconName", "size", "intent", "theme", "label"]);
    var Icon = Icons[iconName];
    var normalizedIntent = intent === 'default' ? 'defaultButton' : intent;
    var contextTheme = (_b = React.useContext(ThemeContext)) === null || _b === void 0 ? void 0 : _b.theme;
    var computedTheme = theme || contextTheme || 'light';
    return (React.createElement(BaseButton, __assign({ className: classnames(styles.iconButton, styles[appearance], styles[computedTheme], (_a = {},
            _a[styles[normalizedIntent]] = !props.disabled,
            _a[styles.disabled] = props.disabled,
            _a), className), forwardRef: ref, "aria-label": label }, rest),
        React.createElement(Icon, { size: size, intent: 'decorative' })));
});
IconButton.displayName = 'IconButton';
