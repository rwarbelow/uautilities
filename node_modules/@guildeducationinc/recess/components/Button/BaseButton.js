var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable react/display-name */
import * as React from 'react';
import * as Icons from '../Icons';
export function BaseButton(props) {
    // We need to drop off all the props that are invalid attributes for the primary DOM node
    /* eslint-disable @typescript-eslint/no-unused-vars */
    var children = props.children, Component = props.Component, disabled = props.disabled, fullWidth = props.fullWidth, href = props.href, iconDirection = props.iconDirection, iconName = props.iconName, testid = props.testid, className = props.className, forwardRef = props.forwardRef, rest = __rest(props, ["children", "Component", "disabled", "fullWidth", "href", "iconDirection", "iconName", "testid", "className", "forwardRef"]);
    /* eslint-enable @typescript-eslint/no-unused-vars */
    var getBaseComponent = function (_a) {
        var Component = _a.Component, href = _a.href;
        if (Component) {
            return Component;
        }
        else if (href) {
            return 'a';
        }
        else {
            return 'button';
        }
    };
    var component = getBaseComponent(props);
    var Icon = iconName && Icons[iconName];
    var CastComponent = component;
    return (React.createElement(CastComponent, __assign({ "aria-disabled": disabled, className: className, "data-testid": testid, disabled: disabled, href: href, ref: forwardRef }, rest),
        React.createElement("span", null,
            props.iconDirection === 'left' && Icon ? React.createElement(Icon, { size: 18, intent: 'decorative' }) : null,
            React.createElement("span", null, children),
            props.iconDirection === 'right' && Icon ? React.createElement(Icon, { size: 18, intent: 'decorative' }) : null)));
}
BaseButton.displayName = 'BaseButton';
