var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable prettier/prettier */
import * as React from 'react';
import classnames from '../../utilities/classnames';
import * as styles from './index.module.css.js';
import { BaseButton } from './BaseButton';
import { ThemeContext } from '../Theme';
export function Button(props) {
    var _a;
    // We need to drop off all the props that are invalid attributes for the primary DOM node
    /* eslint-disable @typescript-eslint/no-unused-vars */
    var _b = props.appearance, appearance = _b === void 0 ? 'primary' : _b, children = props.children, _c = props.intent, intent = _c === void 0 ? 'default' : _c, theme = props.theme, className = props.className, forwardRef = props.forwardRef, rest = __rest(props, ["appearance", "children", "intent", "theme", "className", "forwardRef"]);
    /* eslint-enable @typescript-eslint/no-unused-vars */
    var contextTheme = React.useContext(ThemeContext);
    var computedTheme = theme || (contextTheme === null || contextTheme === void 0 ? void 0 : contextTheme.theme) || 'light';
    /**
     * Needed because the CSS class cannot be exported as `default` because it's a protected keyword in Javascript.
     */
    var normalizedIntent = intent === 'default' ? 'defaultButton' : intent;
    if (appearance === 'inlineLink') {
        console.warn('The "inlineLink" appearance value is deprecated and will be removed in Recess v6. Please use another appearance instead');
    }
    return (React.createElement(BaseButton, __assign({ className: classnames(styles.btn, styles[appearance], styles[computedTheme], (_a = {},
            _a[styles.fullWidth] = props.fullWidth,
            _a[styles[normalizedIntent]] = !props.disabled,
            _a[styles.disabled] = props.disabled,
            _a), className), forwardRef: forwardRef }, rest), children));
}
Button.displayName = 'Button';
