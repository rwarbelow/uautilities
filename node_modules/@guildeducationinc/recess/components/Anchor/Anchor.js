var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import classnames from '../../utilities/classnames';
import * as styles from './index.module.css.js';
import { ThemeContext } from '../Theme';
export function Anchor(props) {
    var children = props.children, className = props.className, Component = props.Component, href = props.href, target = props.target, theme = props.theme, rest = __rest(props, ["children", "className", "Component", "href", "target", "theme"]);
    var contextTheme = React.useContext(ThemeContext);
    var computedTheme = theme || (contextTheme === null || contextTheme === void 0 ? void 0 : contextTheme.theme) || 'light';
    var classes = classnames(styles.anchor, styles[computedTheme], className);
    var relAttr;
    var CastComponent = Component || 'a';
    if (target === '_blank')
        relAttr = 'noopener noreferrer';
    return (React.createElement(CastComponent, __assign({ className: classes, href: href, rel: relAttr, target: target }, rest), children));
}
