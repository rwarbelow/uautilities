var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import classNames from '../../utilities/classnames';
import { textArea, wordCountWrapper, error, textAreaWrapper, labelWrapper, } from './index.module.css.js';
import { ErrorList } from '../ErrorList';
import { InputLabel } from '../InputLabel';
import { Tooltip } from '../Tooltip';
import { InfoCircle } from '../Icons';
import { AlignmentPositions } from '../../utilities/positionCalculator';
var determineNumberOfWords = function (str) {
    if (str === void 0) { str = ''; }
    var words = str.match(/\S+/g);
    return words ? words.length : 0;
};
var updateWordCount = function (event, setWordCount) {
    setWordCount(determineNumberOfWords(event.target.value));
};
var autoSizeTextArea = function (element) {
    if (!element)
        return;
    element.style.height = 'auto';
    element.style.height = element.scrollHeight + "px";
};
export var TextArea = React.forwardRef(function (props, ref) {
    var _a;
    var _b = props.autosize, autosize = _b === void 0 ? true : _b, className = props.className, disabled = props.disabled, errors = props.errors, additionalInfo = props.additionalInfo, hideLabel = props.hideLabel, id = props.id, _c = props.incompleteMessage, incompleteMessage = _c === void 0 ? '' : _c, isInvalid = props.isInvalid, label = props.label, minWords = props.minWords, name = props.name, onBlur = props.onBlur, onChange = props.onChange, _d = props.successMessage, successMessage = _d === void 0 ? '' : _d, value = props.value, rest = __rest(props, ["autosize", "className", "disabled", "errors", "additionalInfo", "hideLabel", "id", "incompleteMessage", "isInvalid", "label", "minWords", "name", "onBlur", "onChange", "successMessage", "value"]);
    var _e = React.useState(determineNumberOfWords(value || '')), wordCount = _e[0], setWordCount = _e[1];
    var textAreaControl = ref || React.useRef(null);
    var errorList = errors ? (Array.isArray(errors) ? errors : [errors]) : [];
    var hasError = isInvalid || errorList.length > 0;
    var fieldId = id || "textarea-" + name;
    var tooltipId = additionalInfo && (label === null || label === void 0 ? void 0 : label.replace(' ', '-').toLowerCase()) + "-info";
    var handleBlur = function (event) {
        updateWordCount(event, setWordCount);
        if (onBlur) {
            onBlur(event);
        }
    };
    var debounce = null;
    var handleChange = function (event) {
        updateWordCount(event, setWordCount);
        if (autosize) {
            if (debounce) {
                clearTimeout(debounce);
            }
            debounce = setTimeout(function () {
                autoSizeTextArea(textAreaControl.current);
            }, 200);
        }
        if (onChange) {
            onChange(event);
        }
    };
    return (React.createElement("div", { className: textAreaWrapper },
        !hideLabel && (React.createElement("div", { className: labelWrapper },
            React.createElement(InputLabel, { disabled: props.disabled, id: fieldId, invalid: hasError, text: label }),
            additionalInfo && (React.createElement(Tooltip, { TooltipContent: additionalInfo, id: tooltipId, preferredPositions: [AlignmentPositions.topMiddle] },
                React.createElement(InfoCircle, { size: 24, "aria-label": 'More info' }))))),
        React.createElement("textarea", __assign({ ref: textAreaControl, className: classNames(textArea, (_a = {}, _a[error] = hasError, _a), className), disabled: disabled, id: fieldId, name: name, onChange: handleChange, onBlur: handleBlur, value: value, "aria-label": hideLabel && label, "aria-invalid": hasError || undefined }, rest)),
        minWords > 0 && (React.createElement("div", { className: wordCountWrapper },
            React.createElement("span", null,
                wordCount >= minWords ? successMessage : incompleteMessage,
                "\u00A0"),
            React.createElement("span", null, wordCount + " / " + minWords))),
        React.createElement(ErrorList, { errors: errorList, show: errorList.length > 0, global: false })));
});
TextArea.displayName = 'TextArea';
