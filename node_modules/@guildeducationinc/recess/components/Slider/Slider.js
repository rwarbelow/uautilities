/* eslint-disable jsx-a11y/click-events-have-key-events */
import * as React from 'react';
import classnames from '../../utilities/classnames';
import { Keys } from '../../utilities/keyboard';
import { sliderOverlay, open as openSlider, slider } from './index.module.css.js';
var FOCUSABLE_ELEMENT_SELECTORS = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, [tabindex="0"], [contenteditable]';
export var Slider = function (_a) {
    var _b, _c;
    var children = _a.children, className = _a.className, id = _a.id, isOpen = _a.isOpen, onClose = _a.onClose, sliderContent = _a.sliderContent, testid = _a.testid, _d = _a.topOffset, topOffset = _d === void 0 ? 0 : _d;
    var sliderRef = React.useRef(null);
    var triggerRef = React.useRef(null);
    var overlayRef = React.useRef(null);
    var focusableElements = sliderRef.current
        ? sliderRef.current.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)
        : [];
    var firstFocusableEl = focusableElements[0];
    var lastFocusableEl = focusableElements[focusableElements.length - 1];
    React.useEffect(function () {
        if (isOpen) {
            if (firstFocusableEl) {
                firstFocusableEl.focus();
            }
            else if (sliderRef.current) {
                sliderRef.current.focus();
            }
        }
    }, [isOpen]);
    var handleClose = function () {
        onClose();
        if (triggerRef.current) {
            triggerRef.current.focus();
        }
    };
    var handleOverlayClick = function (e) {
        if (e.target === overlayRef.current) {
            handleClose();
        }
    };
    var handleKeyDown = function (event) {
        switch (event.key) {
            case Keys.Tab:
                if (event.shiftKey && document.activeElement === firstFocusableEl) {
                    event.preventDefault();
                    lastFocusableEl.focus();
                }
                else if (!event.shiftKey && document.activeElement === lastFocusableEl) {
                    event.preventDefault();
                    firstFocusableEl.focus();
                }
                break;
            case Keys.Enter:
            case Keys.Escape:
                handleClose();
                break;
        }
        if (event.key === Keys.Tab) {
            if (event.shiftKey && document.activeElement === firstFocusableEl) {
                event.preventDefault();
                lastFocusableEl.focus();
            }
            else if (!event.shiftKey && document.activeElement === lastFocusableEl) {
                event.preventDefault();
                firstFocusableEl.focus();
            }
        }
    };
    return (React.createElement("div", null,
        React.cloneElement(React.Children.only(children), {
            'aria-controls': id,
            'aria-expanded': isOpen,
            role: 'button',
            ref: function (node) {
                triggerRef.current = node;
                var ref = React.Children.only(children).ref;
                if (typeof ref === 'function') {
                    ref(node);
                }
                else if (ref !== null) {
                    ref.current = node;
                }
            },
            tabIndex: 0,
        }),
        React.createElement("div", { className: classnames(sliderOverlay, (_b = {}, _b[openSlider] = isOpen, _b), className), "data-testid": testid, 
            // onClick={handleClose}
            ref: overlayRef, onClick: handleOverlayClick, onKeyDown: handleKeyDown, role: 'button', style: { top: topOffset + "px" }, tabIndex: -1 },
            React.createElement("div", { className: classnames(slider, (_c = {}, _c[openSlider] = isOpen, _c)), id: id, ref: sliderRef, role: 'presentation', 
                // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
                tabIndex: 0 }, sliderContent))));
};
