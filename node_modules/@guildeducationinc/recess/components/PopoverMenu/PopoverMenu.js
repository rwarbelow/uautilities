var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import ClickOutside from '../ClickOutside';
import Panel from '../Panel';
import { PopoverWrapperFactory } from '../Popover/PopoverWrapperFactory';
import { AlignmentPositions } from '../../utilities/positionCalculator';
import { Keys } from '../../utilities/keyboard';
import { MenuList } from '../MenuList';
import EventEmitter from '../../utilities/EventEmitter';
var emitter = new EventEmitter();
var emitEvent = function (event) {
    emitter.emit('keydown', event);
};
var eventListenerInitialized = false;
var panelMargin = 8;
var panelTranslation = { deltaX: { originOffset: 6, getDirection: function () { return 1; } } };
export function PopoverMenu(props) {
    var triggerRef = React.useRef();
    var menuRef = React.useRef();
    var _a = React.useState(false), isOpen = _a[0], setOpen = _a[1];
    var actions = props.actions, data = props.data, id = props.id, testid = props.testid;
    var closeMenu = function () { return setOpen(false); };
    var focusButton = function () {
        triggerRef.current.focus();
    };
    var closeMenuAndFocusOnButton = function () {
        closeMenu();
        focusButton();
    };
    React.useEffect(function () {
        if (!eventListenerInitialized) {
            document.addEventListener('keydown', emitEvent);
            eventListenerInitialized = true;
        }
    }, []);
    React.useEffect(function () {
        var handleGlobalKeys = function (e) {
            switch (e.key) {
                case Keys.Escape:
                    e.preventDefault();
                    closeMenuAndFocusOnButton();
                    break;
            }
        };
        emitter.on('keydown', handleGlobalKeys);
        return function () { return emitter.off('keydown', handleGlobalKeys); };
    });
    var handleButtonKeys = function (e) {
        switch (e.key) {
            case Keys.Space:
            case Keys.Enter:
            case Keys.ArrowDown:
                e.preventDefault();
                setOpen(!isOpen);
                break;
            case Keys.ArrowUp:
                e.preventDefault();
                setOpen(!isOpen);
                break;
        }
    };
    var onlyChild = React.Children.only(props.children);
    var panelId = id;
    var triggerId = id + "-trigger";
    var ariaAttrs = {
        'aria-haspopup': 'menu',
        'aria-expanded': isOpen,
        'aria-controls': panelId,
        role: 'button',
    };
    var triggerEventHandlers = {
        onClick: function (e) {
            onlyChild.props.onClick && onlyChild.props.onClick(e);
            setOpen(!isOpen);
        },
        onKeyDown: function (e) {
            onlyChild.props.onKeyDown && onlyChild.props.onKeyDown(e);
            handleButtonKeys(e);
        },
    };
    var PanelContent = PopoverWrapperFactory()(MenuList);
    var actionsWithCloseHook = actions.map(function (action) { return (__assign(__assign({}, action), { onClick: function (data) {
            action.onClick && action.onClick(data);
            closeMenuAndFocusOnButton();
        } })); });
    return (React.createElement(ClickOutside, { onOutsideClick: closeMenu, active: isOpen, container: triggerRef.current },
        React.cloneElement(React.Children.only(props.children), __assign(__assign({ forwardRef: triggerRef, 'data-testid': testid, testid: testid, id: triggerId }, ariaAttrs), triggerEventHandlers)),
        React.createElement(Panel, { ariaId: panelId, contentSize: {}, PanelContent: PanelContent, panelMargin: panelMargin, panelProps: {
                ariaAttrs: __assign(__assign({}, ariaAttrs), { 'aria-labelledby': triggerId }),
                data: data,
                closeMenu: closeMenuAndFocusOnButton,
                menuRef: menuRef,
                actions: actionsWithCloseHook,
                handleKeyboardNav: true,
            }, preferredPositions: [AlignmentPositions.bottomRight], show: isOpen, target: triggerRef.current, testid: props.testid + "--popoverMenu", translation: panelTranslation })));
}
