var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { popoverMenu, dark, light, dangerPopoverMenuItem, popoverMenuItem, disabledItem, popoverMenuButtonContainer, } from './index.module.css.js';
import { Keys } from '../../utilities/keyboard';
import classnames from '../../utilities/classnames';
import LinkItem from './LinkItem';
import ActionItem from './ActionItem';
import { ThemeContext } from '../Theme';
var typeClass = function (type) {
    switch (type) {
        case 'danger':
            return dangerPopoverMenuItem;
        default:
            return '';
    }
};
var determineDisability = function (disabled, data) {
    if (disabled && typeof disabled === 'function') {
        return disabled(data);
    }
    else {
        return !!disabled;
    }
};
var useState = React.useState;
export var MenuList = function (props) {
    var _a;
    var _b = props.ariaAttrs, ariaAttrs = _b === void 0 ? {} : _b, data = props.data, menuRef = props.menuRef, actions = props.actions, className = props.className, theme = props.theme, _c = props.handleKeyboardNav, handleKeyboardNav = _c === void 0 ? false : _c;
    var _d = useState(handleKeyboardNav ? 0 : null), focusedIndex = _d[0], setFocus = _d[1];
    var contextTheme = React.useContext(ThemeContext);
    var normalizeTheme = theme || (contextTheme === null || contextTheme === void 0 ? void 0 : contextTheme.theme) || 'light';
    var handleArrowKeys = function (e) {
        if (!handleKeyboardNav) {
            return;
        }
        switch (e.key) {
            case Keys.ArrowDown:
                e.preventDefault();
                // eslint-disable-next-line no-case-declarations
                var nextIndex = focusedIndex + 1;
                if (nextIndex >= props.actions.length) {
                    setFocus(0);
                }
                else {
                    setFocus(nextIndex);
                }
                break;
            case Keys.ArrowUp:
                e.preventDefault();
                // eslint-disable-next-line no-case-declarations
                var previousIndex = focusedIndex - 1;
                // eslint-disable-next-line no-case-declarations
                var newIndex = previousIndex < 0 ? props.actions.length - 1 : previousIndex;
                setFocus(newIndex);
                break;
            case Keys.Home:
                setFocus(0);
                break;
            case Keys.End:
                setFocus(props.actions.length - 1);
                break;
        }
    };
    return (React.createElement("ul", { role: 'menu', tabIndex: 0, className: classnames(popoverMenu, (_a = {},
            _a[light] = normalizeTheme === 'light',
            _a[dark] = normalizeTheme === 'dark',
            _a), className), "data-testid": '_popover-menu', "aria-labelledby": ariaAttrs['aria-labelledby'], ref: menuRef, onKeyDown: handleArrowKeys, onFocus: function (e) {
            if (e.target.tagName === 'UL') {
                setFocus(-1);
            }
        } }, actions.map(function (_a, index) {
        var _b, _c;
        var type = _a.type, disabled = _a.disabled, action = __rest(_a, ["type", "disabled"]);
        var testid = '_popover-menu-item';
        var isDisabled = determineDisability(disabled, data);
        var className = classnames(popoverMenuItem, typeClass(action.intent), (_b = {},
            _b[disabledItem] = isDisabled,
            _b));
        var isBtnContainer = action.Component &&
            action.Component.displayName === 'Button';
        var parentClassName = classnames((_c = {}, _c[popoverMenuButtonContainer] = isBtnContainer, _c));
        if (type === 'link' || type === 'customLink') {
            var linkAction = __assign({}, action);
            return (React.createElement(LinkItem, __assign({ testid: testid, className: className, parentClassName: parentClassName, data: data, focused: index === focusedIndex, key: "popover-menu-item-" + index, disabled: isDisabled }, linkAction)));
        }
        else {
            var menuAction = action;
            return (React.createElement(ActionItem, __assign({ testid: testid, className: className, data: data, focused: index === focusedIndex, disabled: isDisabled, key: "popover-menu-item-" + index }, menuAction)));
        }
    })));
};
