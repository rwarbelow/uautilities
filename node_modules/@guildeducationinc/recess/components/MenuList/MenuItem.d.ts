import * as React from 'react';
export declare type ActionFunction<T> = (data: T) => void;
export declare type DisabledFunction<T> = (data: T) => boolean;
export declare type Disabled<T> = boolean | DisabledFunction<T>;
export declare type HrefFunction<T> = (data: T) => string;
export declare type Href<T> = string | HrefFunction<T>;
export declare type ATarget = '_blank' | '_self' | '_parent' | '_top';
export declare type ActionIntent = 'default' | 'primary';
interface BaseAction<T> {
    /**
     * Text to be displayed in the menu item
     */
    name: React.ComponentType<T> | string;
    /**
     * Function to be called when either a keyboard or mouse action is preformed
     * @returns this.props.data will be returned as the first argument of this function (data) => console.log(data)
     */
    onClick?: ActionFunction<T>;
    /**
     * Boolean value disabling keyboard and click events when true
     * @default false
     */
    disabled?: boolean;
    /**
     * @type {ActionIntent}
     */
    intent?: 'default' | 'primary';
}
export declare type MenuAction<T> = BaseAction<T>;
export interface BaseLinkAction<T> extends BaseAction<T> {
    /**
     * String representing a href to visit ie: 'http://www.google.com/'
     * OR
     * Function that will generate a href and return a string that will be used in the corresponding anchor tag
     * @returns this.props.data will be returned as the first argument of this function (data) => `/location?id=${data.id}`
     */
    href?: Href<T>;
    /**
     * @type {ATarget}
     */
    target?: ATarget;
}
interface BaseCustomLinkAction<T, P> extends BaseAction<T> {
    /**
     * Custom link Component that will be used in place of a regular a tag.
     */
    Component: React.ComponentType<P>;
    /**
     * @type {ATarget}
     */
    target?: ATarget;
}
export declare type CustomLinkAction<T, P> = BaseCustomLinkAction<T, P> & P;
export {};
