var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { Keys } from '../../utilities/keyboard';
function ActionItem(props) {
    var Name = props.name, onClick = props.onClick, disabled = props.disabled, data = props.data, className = props.className, testid = props.testid, focused = props.focused;
    var optionRef = React.useRef(null);
    React.useEffect(function () {
        if (focused) {
            var timeoutId_1 = setTimeout(function () { return optionRef.current.focus({ preventScroll: true }); });
            return function () { return clearTimeout(timeoutId_1); };
        }
    });
    var onKeyDown = function (e) {
        if (!disabled) {
            switch (e.key) {
                case Keys.Enter:
                case Keys.Space:
                    e.preventDefault();
                    onClick && onClick(data);
            }
        }
    };
    return (React.createElement("li", { role: 'menuitem', className: className, onKeyDown: onKeyDown, onClick: function () { return onClick && onClick(data); }, ref: optionRef, tabIndex: 0, "data-testid": testid, "aria-disabled": disabled }, typeof Name === 'string' ? Name : React.createElement(Name, __assign({}, data))));
}
export default ActionItem;
