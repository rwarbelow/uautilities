var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
function LinkItem(props) {
    var _a;
    /* eslint-disable @typescript-eslint/no-unused-vars */
    var Name = props.name, href = props.href, data = props.data, disabled = props.disabled, testid = props.testid, parentClassName = props.parentClassName, className = props.className, focused = props.focused, target = props.target, Component = props.Component, rest = __rest(props, ["name", "href", "data", "disabled", "testid", "parentClassName", "className", "focused", "target", "Component"]);
    var optionRef = React.useRef(null);
    React.useEffect(function () {
        if (focused) {
            var timeoutId_1 = setTimeout(function () { return optionRef.current.focus({ preventScroll: true }); });
            return function () { return clearTimeout(timeoutId_1); };
        }
    });
    // Support prop signature for refs into the Button component, use standard ref otherwise
    var CaseComponent = ((_a = props) === null || _a === void 0 ? void 0 : _a.Component) || 'a';
    var caseProps = __assign({}, rest);
    if (props.Component && props.Component.displayName === 'Button') {
        caseProps.forwardRef = optionRef;
    }
    else {
        caseProps.ref = optionRef;
    }
    return (React.createElement("li", { role: 'menuitem', "data-testid": testid, tabIndex: -1, className: parentClassName },
        React.createElement(CaseComponent, __assign({ target: target, className: className, "aria-disabled": disabled, href: href && typeof href === 'function' ? href(data) : href }, caseProps), typeof Name === 'string' ? Name : React.createElement(Name, __assign({}, data)))));
}
export default LinkItem;
