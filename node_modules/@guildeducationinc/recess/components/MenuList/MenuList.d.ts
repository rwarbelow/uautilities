import * as React from 'react';
import { MenuAction, BaseLinkAction, CustomLinkAction } from './MenuItem';
export interface AriaAttrs {
    'aria-haspopup': boolean;
    'aria-expanded': boolean;
    'aria-controls': string;
    'aria-disabled': boolean;
    'aria-labelledby': 'string';
}
export interface LinkActionArrayItem<T> extends BaseLinkAction<T> {
    type: 'link';
}
export declare type CustomLinkActionArrayItem<T, P> = CustomLinkAction<T, P> & {
    type: 'customLink';
};
export interface MenuActionArrayItem<T> extends MenuAction<T> {
    type: 'action';
}
export declare type Actions<T = {}, P = {}> = Array<LinkActionArrayItem<T> | CustomLinkActionArrayItem<T, P> | MenuActionArrayItem<T>>;
export interface MenuListProps<T, P> {
    /**
     * Props that used when the MenuList is triggered via a popover.
     * If using MenuList itself, these props can be safely ignored.
     */
    ariaAttrs?: AriaAttrs;
    /**
     * Metadata that is passed through to an actions `onClick` prop or an `href` function
     */
    data?: T;
    menuRef?: React.RefObject<HTMLUListElement>;
    /**
     * An array of actions to be displayed in the menu.
     *
     * Actions can be of two types:
     * ```ts
     * // Action type
     *  {
     *    type: 'action',
     *    name: 'Action One' OR a custom react component,
          onClick: () => console.log('Action One'),
          intent: 'default' | 'danger',
          disabled?: boolean;
     *  }
     * ```
     *
     * ```ts
     * // Link type
     *  {
     *     type: 'link',
     *     name: 'Action One' OR a custom react component,
           onClick: () => console.log('Action One'),
           intent: 'default' | 'danger',
           disabled?: boolean;,
           href?: string | (data) => string,
           Component?: React.ComponentType<P>,
           ...P (Props of Component, if it's passed)
     *  }
     * ```
     */
    actions: Actions<T, P>;
    className?: string;
    theme?: 'dark' | 'light';
    /**
     * Toggle if the MenuList should support keyboard naviagion. Generally used if the component
     * is in a popoverMenu context.
     */
    handleKeyboardNav?: boolean;
}
export declare const MenuList: <T extends any, P>(props: MenuListProps<T, P>) => JSX.Element;
