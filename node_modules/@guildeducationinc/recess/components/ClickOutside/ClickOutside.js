var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import EventEmitter from '../../utilities/EventEmitter';
import { isBrowser } from '../../utilities/isBrowser';
var emitter = new EventEmitter();
/**
 * NOTE if you are working with a Class component, use this one! If you're making a Function
 * component, go check out the useOutsideClick hook (/utilities/customHooks/useOutsideClick)!
 */
if (isBrowser()) {
    window.addEventListener('click', function (event) { return emitter.emit('click', event); });
    window.addEventListener('touchend', function (event) { return emitter.emit('touchend', event); });
}
/**
 * A target is contained by a container if the container can be reached by following the parentNodes
 * of the target. When the target is not contained by the container,
 * we use the Portal component to jump into the container's DOM tree.
 */
var isContainedBy = function (target, container) {
    if (!target || !container) {
        return false;
    }
    var currentElement = target;
    var portalRoot = null;
    while (currentElement && currentElement !== document.documentElement) {
        if (currentElement === container) {
            return true;
        }
        if (currentElement.hasAttribute('id')) {
            var id = currentElement.getAttribute('id');
            portalRoot = document.querySelector("[aria-owns=\"" + id + "\"]");
            if (portalRoot) {
                return true;
            }
        }
        currentElement = portalRoot || currentElement.parentElement;
    }
    return false;
};
/**
 * The ClickOutside is a HOC to hander the use case when click or touch events that happen outside a given component
 * need to be listened to and acted upon.
 *
 * @example
 * ```tsx
 *  <ClickOutside
 *    onOutsideClick={() => console.log('Click happened outside of the wrapped component')}
 *    active={true}
 *  />
 *      <div> I am a container </div>
 *  </ClickOutside
 * ```
 */
var ClickOutside = /** @class */ (function (_super) {
    __extends(ClickOutside, _super);
    function ClickOutside() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleOutsideClick = function (e) {
            var target = e.target;
            // eslint-disable-next-line react/no-find-dom-node
            var container = _this.props.container || ReactDOM.findDOMNode(_this);
            if (_this.props.onOutsideClick &&
                _this.props.active &&
                !isContainedBy(target, container) &&
                _this.props.active) {
                _this.props.onOutsideClick(e);
            }
        };
        return _this;
    }
    ClickOutside.prototype.componentDidMount = function () {
        emitter.on('click', this.handleOutsideClick);
        emitter.on('touchend', this.handleOutsideClick);
    };
    ClickOutside.prototype.componentWillUnmount = function () {
        emitter.off('click', this.handleOutsideClick);
        emitter.off('touchend', this.handleOutsideClick);
    };
    ClickOutside.prototype.render = function () {
        return this.props.children;
    };
    return ClickOutside;
}(React.Component));
export { ClickOutside };
