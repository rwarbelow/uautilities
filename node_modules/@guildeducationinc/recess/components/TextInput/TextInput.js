var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable react/display-name */
import * as React from 'react';
import MaskedInput from 'react-text-mask';
import classNames from 'classnames';
import { getMask } from './textInputUtility';
import { ErrorList } from '../ErrorList';
import { textInput, error, textInputWrapper, withInlineLabel, labelWrapper, } from './index.module.css.js';
import { InputLabel } from '../InputLabel';
import { uuid } from '../../utilities/uuid';
import { InputAddon } from '../InputAddon';
import { Tooltip } from '../Tooltip';
import { InfoCircle } from '../Icons';
import { AlignmentPositions } from '../../utilities/positionCalculator';
export var TextInput = React.forwardRef(function (props, ref) {
    var _a, _b;
    var append = props.append, className = props.className, errors = props.errors, additionalInfo = props.additionalInfo, hideLabel = props.hideLabel, id = props.id, inlineLabel = props.inlineLabel, isInvalid = props.isInvalid, label = props.label, mask = props.mask, prepend = props.prepend, testid = props.testid, _c = props.type, type = _c === void 0 ? 'text' : _c, rest = __rest(props, ["append", "className", "errors", "additionalInfo", "hideLabel", "id", "inlineLabel", "isInvalid", "label", "mask", "prepend", "testid", "type"]);
    var maskExp;
    if (mask && typeof mask === 'string') {
        maskExp = getMask(mask);
    }
    else if (mask) {
        maskExp = mask;
    }
    var errorList = errors ? (Array.isArray(errors) ? errors : [errors]) : [];
    var hasError = isInvalid || errorList.length > 0;
    var fieldId;
    if (id) {
        fieldId = id;
    }
    else if (props.name) {
        fieldId = props.name + "-input";
    }
    else if (label) {
        fieldId = "textinput-" + uuid();
    }
    var errorId = hasError ? fieldId + "-error" : undefined;
    var tooltipId = additionalInfo && (label === null || label === void 0 ? void 0 : label.replace(' ', '-').toLowerCase()) + "-info";
    var inputProps = __assign({ id: fieldId, className: classNames(textInput, className, (_a = {}, _a[error] = hasError, _a)), type: type, 'aria-label': hideLabel && label, 'aria-invalid': hasError || undefined, 'aria-describedby': errorId }, rest);
    return (React.createElement("div", { className: classNames(textInputWrapper, (_b = {}, _b[withInlineLabel] = inlineLabel, _b)), "data-testid": testid },
        !hideLabel && (React.createElement("div", { className: labelWrapper },
            React.createElement(InputLabel, { disabled: props.disabled, id: fieldId, invalid: hasError, text: label }),
            additionalInfo && (React.createElement(Tooltip, { TooltipContent: additionalInfo, id: tooltipId, preferredPositions: [AlignmentPositions.topMiddle] },
                React.createElement(InfoCircle, { size: 24, "aria-label": 'More info' }))))),
        React.createElement(InputAddon, { testid: testid ? testid + "-addon" : undefined, hasErrors: hasError, append: append, prepend: prepend }, maskExp ? (React.createElement(MaskedInput, __assign({ mask: maskExp }, inputProps))) : (React.createElement("input", __assign({}, inputProps, { ref: ref })))),
        React.createElement(ErrorList, { errors: errorList, id: errorId, show: errorList.length > 0 })));
});
