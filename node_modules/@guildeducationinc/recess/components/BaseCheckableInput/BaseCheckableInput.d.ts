import * as React from 'react';
import { InputOnChange } from '../../types/InputTypes';
/**
 * There's a typing issue here with the input element using LegacyRef, which is partially type
 * incompatible with forwardRef. This Omit gets around the issue
 * */
export interface BaseSelectableInputProps extends Omit<React.HTMLProps<HTMLInputElement>, 'ref'> {
    onChange?: InputOnChange;
    checked?: boolean;
    value?: string | number;
    /**
     * Label associated with checkbox.
     *
     * ❗️It should be defined for accessibility reasons
     * If you don't want the label visible, you can hide it using the `hideLabel` prop.
     * This will set the `aria-label` value on the input and conditionally render the label element
     *
     */
    label?: string;
    /**
     * Additional information that is displayed in a tooltip next to the input label.
     */
    additionalInfo?: React.ComponentType | string;
    /**
     * Optional prop to control rendering of label since `label` prop should be provided even if you don't want to render a label.
     * Defaults to false
     *
     * @default false
     */
    hideLabel?: boolean;
    type?: 'checkbox' | 'radio';
    errors?: string | string[];
    className?: string;
}
export declare const BaseSelectableInput: React.ForwardRefExoticComponent<BaseSelectableInputProps & React.RefAttributes<HTMLInputElement>>;
