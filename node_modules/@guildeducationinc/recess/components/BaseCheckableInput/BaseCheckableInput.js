var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import classNames from 'classnames';
import { ErrorList } from '../ErrorList';
import { Tooltip } from '../Tooltip';
import { InfoCircle } from '../Icons';
import { AlignmentPositions } from '../../utilities/positionCalculator';
import * as styles from './index.module.css.js';
var fallbackId = 0;
export var BaseSelectableInput = React.forwardRef(function (props, ref) {
    var _a;
    var name = props.name, id = props.id, checked = props.checked, label = props.label, _b = props.type, type = _b === void 0 ? 'checkbox' : _b, errors = props.errors, _c = props.hideLabel, hideLabel = _c === void 0 ? false : _c, className = props.className, additionalInfo = props.additionalInfo, rest = __rest(props, ["name", "id", "checked", "label", "type", "errors", "hideLabel", "className", "additionalInfo"]);
    var errorList = errors ? (Array.isArray(errors) ? errors : [errors]) : [];
    var hasError = errorList.length > 0;
    var effectiveId = id || "" + fallbackId++;
    var labelId = effectiveId + "-label";
    var labelClasses = classNames((_a = {},
        _a[styles.invalid] = hasError,
        _a[styles.disabled] = rest.disabled,
        _a[styles.hidden] = hideLabel,
        _a));
    var tooltipId = additionalInfo && (label === null || label === void 0 ? void 0 : label.replace(' ', '-').toLowerCase()) + "-info";
    return (React.createElement("div", { className: classNames(styles.radioCouplet, className) },
        React.createElement("input", __assign({ type: type, role: type, className: classNames({ checked: checked }), id: effectiveId, name: name, checked: checked, "aria-checked": checked, "aria-invalid": hasError || undefined, ref: ref }, rest)),
        React.createElement("span", { "aria-hidden": true }),
        React.createElement("div", { className: styles.labelWrapper },
            React.createElement("label", { htmlFor: effectiveId, id: labelId, className: labelClasses }, label),
            additionalInfo && (React.createElement(Tooltip, { TooltipContent: additionalInfo, id: tooltipId, preferredPositions: [AlignmentPositions.topMiddle] },
                React.createElement(InfoCircle, { size: 24, "aria-label": 'More info' })))),
        React.createElement(ErrorList, { errors: errorList, show: errorList.length > 0, global: false })));
});
