var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import classNames from '../../utilities/classnames';
import { TabPane } from './TabPane';
import { Tab } from './Tab';
import { Card } from '../Card';
import { noBorder, tabGroupWrapper, tabPaneContent, tabNavWrapper } from './index.module.css.js';
var nextId = 0;
var END = 35;
var HOME = 36;
var LEFT_ARROW = 37;
var RIGHT_ARROW = 39;
var Tabs = /** @class */ (function (_super) {
    __extends(Tabs, _super);
    function Tabs(props) {
        var _this = _super.call(this, props) || this;
        _this.tabCount = 0;
        _this.activateTab = function (index) {
            var _a = _this.props, activeIndex = _a.activeIndex, onActive = _a.onActive;
            if (index >= _this.tabCount) {
                index = 0;
            }
            if (index < 0) {
                index = 0;
            }
            if (activeIndex === undefined) {
                _this.setState({ activeIndex: index });
            }
            if (onActive) {
                onActive(index);
            }
        };
        _this.state = {
            activeIndex: props.activeIndex || 0,
        };
        nextId += 1;
        _this.keyDownHandler = _this.keyDownHandler.bind(_this);
        return _this;
    }
    Tabs.getDerivedStateFromProps = function (nextProps, prevState) {
        var activeIndex = nextProps.activeIndex;
        var stateActiveIndex = prevState.activeIndex;
        if (stateActiveIndex !== activeIndex && activeIndex !== undefined) {
            return { activeIndex: activeIndex };
        }
        return { activeIndex: stateActiveIndex || 0 };
    };
    Tabs.prototype.keyDownHandler = function (event) {
        var t = this.state.activeIndex || 0;
        switch (event.keyCode) {
            case HOME:
                this.activateTab(0);
                event.preventDefault();
                break;
            case END:
                this.activateTab(this.tabCount - 1);
                event.preventDefault();
                break;
            case RIGHT_ARROW:
                t = t + 1;
                this.activateTab(t);
                event.preventDefault();
                break;
            case LEFT_ARROW:
                t = t - 1;
                if (t < 0) {
                    t = this.tabCount - 1;
                }
                this.activateTab(t);
                event.preventDefault();
                break;
            default:
        }
    };
    Tabs.prototype.render = function () {
        var _this = this;
        var _a = this.props, _b = _a.border, border = _b === void 0 ? true : _b, children = _a.children, className = _a.className, rest = __rest(_a, ["border", "children", "className"]);
        delete rest.activeIndex;
        delete rest.onActive;
        var activeIndex = this.state.activeIndex;
        var tabContent = [];
        this.tabCount = React.Children.count(children);
        var tabs = React.Children.map(children, function (tab, index) {
            if (!tab) {
                return undefined;
            }
            var tabProps = tab.props || {};
            var isTabActive = index === activeIndex;
            tabContent.push(React.createElement(Tabs.Pane, { key: "TabPane-" + nextId + "-" + index, active: isTabActive, group: nextId, index: index }, tabProps.children));
            return React.cloneElement(tab, {
                active: isTabActive,
                onActivate: function () { return _this.activateTab(index); },
                tabGroupId: nextId,
                tabIndex: index,
            });
        });
        var cardClasses = classNames(tabGroupWrapper, className, !border && noBorder);
        var navClasses = classNames(tabNavWrapper, !border && noBorder);
        /* eslint-disable */
        return (React.createElement(Card, { className: cardClasses },
            React.createElement(Card.Content, null,
                React.createElement("nav", { className: navClasses, role: 'tablist', onKeyDown: this.keyDownHandler }, tabs),
                React.createElement("div", { className: tabPaneContent }, tabContent))));
        /* eslint-enable */
    };
    Tabs.Pane = TabPane;
    Tabs.Tab = Tab;
    return Tabs;
}(React.Component));
export { Tabs };
