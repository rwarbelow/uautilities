var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import classnames from 'classnames';
import * as React from 'react';
import { useDropzone } from 'react-dropzone';
import { Anchor } from '../Anchor';
import ErrorList from '../ErrorList';
import { CloudUpload, InfoCircle } from '../Icons';
import { Paragraph } from '../Typography';
import { Tooltip } from '../Tooltip';
import { AlignmentPositions } from '../../utilities/positionCalculator';
import * as styles from './index.module.css.js';
export var FileUploader = function (_a) {
    var _b, _c;
    var _d = _a.acceptedFileList, acceptedFileList = _d === void 0 ? [] : _d, className = _a.className, _e = _a.dropZoneProps, dropZoneProps = _e === void 0 ? {
        maxSize: 10485760,
        accept: undefined,
        multiple: false,
    } : _e, _f = _a.dragText, dragText = _f === void 0 ? 'Drop the files here' : _f, _g = _a.dropZoneText, dropZoneText = _g === void 0 ? "Drag here or browse to upload" : _g, _h = _a.errors, errors = _h === void 0 ? [] : _h, _j = _a.exampleLabel, exampleLabel = _j === void 0 ? 'View an example document' : _j, exampleUrl = _a.exampleUrl, additionalInfo = _a.additionalInfo, _k = _a.hideLabel, hideLabel = _k === void 0 ? false : _k, id = _a.id, label = _a.label, name = _a.name, onAdd = _a.onAdd, onReject = _a.onReject, _l = _a.rejectedFileList, rejectedFileList = _l === void 0 ? [] : _l, supportedText = _a.supportedText, _m = _a.testid, testid = _m === void 0 ? 'fileUploader' : _m;
    var fieldId = id || name || 'inputField';
    var labelId = fieldId + "-label";
    var dropzoneTextId = fieldId + "-details";
    var hasErrors = errors && errors.length > 0;
    var tooltipId = additionalInfo && (label === null || label === void 0 ? void 0 : label.replace(' ', '-').toLowerCase()) + "-info";
    var acceptedFileTypes;
    if (dropZoneProps && dropZoneProps.accept) {
        if (!Array.isArray(dropZoneProps.accept)) {
            acceptedFileTypes = [dropZoneProps.accept];
        }
        else {
            acceptedFileTypes = dropZoneProps.accept;
        }
    }
    var onDrop = React.useCallback(function (acceptedFiles, rejectedFiles, event) {
        acceptedFiles.forEach(function (file) {
            onAdd(file, event);
        });
        if (onReject && rejectedFiles && rejectedFiles.length) {
            var maxSize_1 = (dropZoneProps && dropZoneProps.maxSize) || 0;
            onReject(rejectedFiles.map(function (file) {
                if (maxSize_1 > 0 && file.size > maxSize_1) {
                    file.error = 'File is too large';
                }
                else if (acceptedFileTypes && acceptedFileTypes.indexOf(file.type) > -1) {
                    file.error = 'File type is not accepted';
                }
                return file;
            }), event);
        }
    }, [onAdd, onReject, dropZoneProps]);
    var _o = useDropzone(__assign({ onDrop: onDrop }, dropZoneProps)), isFocused = _o.isFocused, getRootProps = _o.getRootProps, getInputProps = _o.getInputProps, isDragActive = _o.isDragActive;
    return (React.createElement("div", { "data-testid": testid, className: styles.fileUploaderWrapper },
        exampleUrl && (React.createElement("div", { className: styles.exampleFile },
            React.createElement(Paragraph, null,
                exampleLabel,
                ' ',
                React.createElement(Anchor, { "data-testid": testid + "-example", target: '_blank', href: exampleUrl }, "here"),
                "."))),
        (acceptedFileList || rejectedFileList) && (React.createElement("ul", { className: styles.fileUploaderList, "data-testid": testid + "-fileList" },
            acceptedFileList,
            rejectedFileList)),
        React.createElement("div", { className: styles.labelWrapper },
            React.createElement("label", { className: classnames(styles.label, (_b = {},
                    _b[styles.error] = hasErrors,
                    _b[styles.hidden] = hideLabel,
                    _b)), "data-testid": testid + "-label", id: labelId }, label),
            additionalInfo && (React.createElement(Tooltip, { TooltipContent: additionalInfo, id: tooltipId, preferredPositions: [AlignmentPositions.topMiddle] },
                React.createElement(InfoCircle, { size: 24, "aria-label": 'More info' })))),
        React.createElement("div", __assign({ "data-testid": testid && testid + "-dropZone" }, getRootProps({
            'aria-labelledby': labelId + " " + dropzoneTextId,
            className: classnames(styles.dropzone, (_c = {}, _c[styles.dropzoneFocused] = isFocused, _c), className),
            role: 'button',
        })),
            React.createElement("input", __assign({ "aria-invalid": hasErrors || undefined }, getInputProps({ name: name, id: fieldId }))),
            React.createElement(CloudUpload, { size: 48 }),
            isDragActive && (React.createElement("span", { "data-testid": testid + "-dragText", id: dropzoneTextId }, dragText)),
            !isDragActive && dropZoneText && (React.createElement("span", { "data-testid": testid + "-dropZoneText", id: dropzoneTextId }, dropZoneText))),
        supportedText && React.createElement("p", { "data-testid": testid && testid + "-supportedText" }, supportedText),
        React.createElement(ErrorList, { show: hasErrors, errors: errors })));
};
