var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable react/prop-types */
import React from 'react';
import ReactAutocomplete from 'react-autocomplete';
import classNames from '../../utilities/classnames';
import { compose, withState, withHandlers, defaultProps } from 'recompose';
import { autocompleteItem, autocompleteMenu } from './index.module.css.js';
import { TextInput } from '../TextInput';
var getDisplay = function (item) { return item.display || item.label || item.value; };
var getValue = function (item) {
    return item.value && typeof item.value === 'string' ? item.value : getDisplay(item);
};
var renderItem = function (item, isHighlighted) {
    var key = item.key || getValue(item);
    var className = classNames(autocompleteItem, 'text-teal fontWeight--600', {
        'bg-black-lighten-87': isHighlighted,
    });
    return (React.createElement("div", { key: "RecessAutocomplete-item-" + key, className: className }, getDisplay(item)));
};
var renderMenu = function (items) {
    return items.length === 0 ? (React.createElement("div", { className: autocompleteMenu + " margin--top_4" },
        React.createElement("p", { className: autocompleteItem + " fontWeight--600" }, "No Results Found"))) : (React.createElement("div", { className: autocompleteMenu + " margin--top_4" }, items));
};
function AutocompleteComponent(props) {
    var items = props.items, getItem = props.getItem, value = props.value, setValue = props.setValue, onChange = props.onChange, onSelect = props.onSelect, handleBlur = props.handleBlur, onFocus = props.onFocus, clearOnSelect = props.clearOnSelect, disableAutofill = props.disableAutofill, required = props.required, disabled = props.disabled, id = props.id, name = props.name, placeholder = props.placeholder, testid = props.testid, label = props.label, errors = props.errors, isInvalid = props.isInvalid, additionalInfo = props.additionalInfo, rest = __rest(props, ["items", "getItem", "value", "setValue", "onChange", "onSelect", "handleBlur", "onFocus", "clearOnSelect", "disableAutofill", "required", "disabled", "id", "name", "placeholder", "testid", "label", "errors", "isInvalid", "additionalInfo"]);
    var inputProps = {
        required: required,
        disabled: disabled,
        name: name,
        id: id,
        placeholder: placeholder,
        onBlur: handleBlur,
        readOnly: disableAutofill,
        onFocus: onFocus,
        testid: testid,
        label: label,
        errors: errors,
        isInvalid: isInvalid,
    };
    return (React.createElement(ReactAutocomplete, __assign({ items: items, value: value, getItemValue: getDisplay, inputProps: inputProps, wrapperStyle: { position: 'relative' } }, rest, { renderInput: function (props) { return React.createElement(TextInput, __assign({}, props, { additionalInfo: additionalInfo })); }, renderItem: renderItem, renderMenu: renderMenu, onChange: function (event) {
            var val = event.target.value;
            setValue(val);
            onChange(event);
        }, onSelect: function (val) {
            var item = getItem(val);
            setValue(clearOnSelect ? '' : val);
            onSelect(item);
        } })));
}
function validValue(items, value) {
    return items.some(function (item) {
        var display = getDisplay(item);
        return display === value;
    });
}
export var Autocomplete = compose(defaultProps({
    items: [],
    clearOnSelect: false,
    disableAutofill: false,
    onChange: function (x) { return x; },
    onSelect: function (x) { return x; },
    onBlur: function (x) { return x; },
}), withState('value', 'setValue', function (props) { return props.value || ''; }), withHandlers({
    getItem: function (_a) {
        var items = _a.items;
        return function (value) { return items.filter(function (item) { return getDisplay(item) === value; })[0]; };
    },
    onFocus: function () { return function (event) {
        // used for disabling browser autofill
        if (event.target.hasAttribute('readonly')) {
            // blur and refocus shows keyboard on mobile safari
            event.target.blur();
            event.target.removeAttribute('readonly');
            event.target.focus();
        }
    }; },
    handleBlur: function (_a) {
        var items = _a.items, setValue = _a.setValue, onBlur = _a.onBlur;
        return function (event) {
            if (!validValue(items, event.target.value)) {
                setValue('');
                event.target.value = '';
            }
            if (!event.target.hasAttribute('readonly'))
                onBlur(event);
        };
    },
}))(AutocompleteComponent);
