var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as styles from './index.module.css.js';
import classnames from '../../utilities/classnames';
import { ThemeContext } from '../Theme';
var headingElementMap = {
    100: 'h6',
    200: 'h5',
    250: 'h4',
    300: 'h4',
    400: 'h3',
    500: 'h2',
    600: 'h1',
    1: 'h1',
    2: 'h2',
    3: 'h3',
    4: 'h4',
    5: 'h5',
    6: 'h6',
};
// Remove sizeMap when removing deprecated `size` values
var sizeMap = {
    600: 1,
    500: 2,
    400: 3,
    300: 4,
    200: 5,
    100: 6,
    250: 5,
};
export var Heading = function (props) {
    var _a;
    var children = props.children, className = props.className, color = props.color, id = props.id, _b = props.size, size = _b === void 0 ? 3 : _b, testid = props.testid, theme = props.theme, weight = props.weight;
    var tag = (_a = props.tag) !== null && _a !== void 0 ? _a : headingElementMap[size];
    var TagName = tag;
    var themeContext = React.useContext(ThemeContext);
    var computedTheme = theme || (themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) || 'light';
    var normalizedSize = typeof size === 'number' ? size : sizeMap[size];
    var classes = classnames(styles.heading, styles["heading" + normalizedSize], styles[computedTheme], className);
    var style = __assign({ color: color, fontWeight: weight }, props.style);
    return (React.createElement(TagName, { className: classes, "data-testid": testid, style: style, id: id }, children));
};
