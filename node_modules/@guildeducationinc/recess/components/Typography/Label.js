var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as styles from './index.module.css.js';
import classnames from '../../utilities/classnames';
import { ThemeContext } from '../Theme';
export var Label = function (props) {
    var children = props.children, className = props.className, color = props.color, id = props.id, tag = props.tag, testid = props.testid, theme = props.theme, weight = props.weight, _a = props.variation, variation = _a === void 0 ? 1 : _a;
    var contextTheme = React.useContext(ThemeContext);
    var computedTheme = theme || (contextTheme === null || contextTheme === void 0 ? void 0 : contextTheme.theme) || 'light';
    var TagName = (tag || 'p');
    var classes = classnames(styles.label, styles[computedTheme], styles["label" + variation], className);
    var style = __assign({ color: color, fontWeight: weight }, props.style);
    return (React.createElement(TagName, { style: style, "data-testid": testid, className: classes, id: id }, children));
};
