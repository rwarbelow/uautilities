var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { pagination, arrow, hidden, pageItem, pageButton, activePage } from './index.module.css.js';
import classNames from '../../utilities/classnames';
import { ElaboratePagination } from './ElaboratePagination';
var Pagination = /** @class */ (function (_super) {
    __extends(Pagination, _super);
    function Pagination() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.changePage = function (page) {
            return function () {
                _this.props.onChangePage(page);
            };
        };
        _this.decrementPage = function () {
            return _this.props.onChangePage(_this.props.currentPage - 1);
        };
        _this.incrementPage = function () {
            return _this.props.onChangePage(_this.props.currentPage + 1);
        };
        return _this;
    }
    Pagination.prototype.render = function () {
        var _a, _b;
        var _this = this;
        var _c = this.props, className = _c.className, currentPage = _c.currentPage, _d = _c.isSlim, isSlim = _d === void 0 ? true : _d, totalPages = _c.totalPages, testid = _c.testid;
        if (isSlim) {
            var firstPage = currentPage === 1;
            var lastPage = currentPage === totalPages;
            return (React.createElement("nav", { "aria-label": 'pagination', "data-testid": testid },
                React.createElement("ul", { className: classNames(pagination, className) },
                    React.createElement("li", null,
                        React.createElement("button", { onClick: firstPage ? null : this.decrementPage, className: classNames(arrow, (_a = {}, _a[hidden] = firstPage, _a)), "aria-label": 'Previous Page', "data-testid": 'previousPage', "aria-disabled": firstPage }, "\u2190")),
                    this.pageRange().map(function (page) {
                        var _a;
                        return (React.createElement("li", { key: "li-page-number-" + page, className: pageItem },
                            React.createElement("button", { onClick: _this.changePage(page), className: classNames(pageButton, (_a = {},
                                    _a[activePage] = page === currentPage,
                                    _a)), key: "page-number-" + page, "aria-label": page === currentPage ? "Current Page, Page " + page : "Goto Page " + page, "aria-current": page === currentPage }, page)));
                    }),
                    React.createElement("li", null,
                        React.createElement("button", { onClick: lastPage ? null : this.incrementPage, className: classNames(arrow, (_b = {}, _b[hidden] = lastPage, _b)), "aria-disabled": lastPage, "aria-label": 'Next Page', "data-testid": 'nextPage' }, "\u2192")))));
        }
        else {
            return React.createElement(ElaboratePagination, __assign({}, this.props));
        }
    };
    Pagination.prototype.pageRange = function () {
        var _a = this.props, currentPage = _a.currentPage, totalPages = _a.totalPages;
        var minDisplayedPages = 1;
        var maxDisplayedPages = 5;
        if (maxDisplayedPages > totalPages) {
            maxDisplayedPages = totalPages;
        }
        var startPage = Math.max(currentPage - Math.floor(maxDisplayedPages / 2), minDisplayedPages);
        startPage = Math.min(startPage, minDisplayedPages + totalPages - maxDisplayedPages);
        return Array.from({ length: maxDisplayedPages }, function (_, i) { return startPage + i; });
    };
    return Pagination;
}(React.PureComponent));
export { Pagination };
