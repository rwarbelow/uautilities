import * as React from 'react';
import { dots, dotShape, elaborateActivePage, pagination } from './index.module.css.js';
import Button, { IconButton } from '../Button';
import classnames from '../../utilities/classnames';
export var sortedPages = function (currentPage, totalPages, pageVariance, boundaryLimit) {
    var inFirstSection = currentPage < boundaryLimit - pageVariance;
    var inLastSection = currentPage > totalPages - boundaryLimit;
    var leftBoundary = currentPage - pageVariance;
    var rightBoundary = currentPage + pageVariance + 1;
    var range = [];
    for (var i = 1; i <= totalPages; i++) {
        var beforeDots = i <= boundaryLimit;
        var afterDots = i > totalPages - boundaryLimit;
        if (i === 1 ||
            i === totalPages ||
            (i >= leftBoundary && i < rightBoundary) ||
            (beforeDots && inFirstSection) ||
            (afterDots && inLastSection)) {
            range.push(i);
        }
    }
    var rangeWithDots = [];
    var j;
    for (var _i = 0, range_1 = range; _i < range_1.length; _i++) {
        var i = range_1[_i];
        if (j) {
            if (i - j === 2) {
                rangeWithDots.push('...');
            }
            else if (i - j !== 1) {
                rangeWithDots.push('...');
            }
        }
        rangeWithDots.push(i);
        j = i;
    }
    return rangeWithDots;
};
var renderDots = function (key) {
    return (React.createElement("li", { className: dots, key: key },
        React.createElement("div", { className: dotShape }),
        React.createElement("div", { className: dotShape }),
        React.createElement("div", { className: dotShape })));
};
var pageButton = function (page, currentPage, jumpToPage) {
    var _a;
    return (React.createElement("li", { key: page },
        React.createElement(Button, { testid: "page-button-" + page, onClick: function () { return jumpToPage(page); }, appearance: 'text', className: classnames(pageButton, (_a = {},
                _a[elaborateActivePage] = page === currentPage,
                _a)) }, page)));
};
var leftButton = function (isFirstPage, decrementPage) {
    return (React.createElement(IconButton, { appearance: 'text', "aria-disabled": isFirstPage, "aria-label": 'Previous Page', disabled: isFirstPage, iconName: 'ChevronLeft', key: 'left-button', label: 'Previous Page', onClick: isFirstPage ? null : decrementPage, testid: 'pagination-button-previous-page' }));
};
var rightButton = function (isLastPage, incrementPage) {
    return (React.createElement(IconButton, { appearance: 'text', "aria-disabled": isLastPage, "aria-label": 'Next Page', disabled: isLastPage, iconName: 'ChevronRight', key: 'right-button', label: 'Next Page', onClick: isLastPage ? null : incrementPage, testid: 'pagination-button-next-page' }));
};
export var ElaboratePagination = function (props) {
    var currentPage = props.currentPage, totalPages = props.totalPages, onChangePage = props.onChangePage, className = props.className, testid = props.testid;
    var pages = sortedPages(currentPage, totalPages, 2, 5);
    var decrementPage = function () { return onChangePage(currentPage - 1); };
    var incrementPage = function () { return onChangePage(currentPage + 1); };
    return (React.createElement("nav", { "aria-label": 'pagination', "data-testid": testid },
        React.createElement("ul", { className: classnames(pagination, className) },
            React.createElement("li", null, leftButton(currentPage === 1, decrementPage)),
            pages.map(function (page, i) {
                return page === '...'
                    ? renderDots(page + i)
                    : pageButton(page, currentPage, function (page) { return onChangePage(page); });
            }),
            React.createElement("li", null, rightButton(currentPage === totalPages, incrementPage)))));
};
export default ElaboratePagination;
