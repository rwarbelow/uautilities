var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import classNames from '../../utilities/classnames';
import * as Icons from '../Icons';
import { link } from './index.module.css.js';
var Fragment = React.Fragment;
export var mapLinkProps = function (props) {
    var active = props.active, title = props.title, className = props.className, iconColor = props.iconColor, iconName = props.iconName, children = props.children, rest = __rest(props, ["active", "title", "className", "iconColor", "iconName", "children"]);
    var Icon = iconName && Icons[iconName];
    var fill = iconColor || '#01A8A5';
    var label = children || title;
    // intentionally removing props that should not get passed into an anchor tag
    return __assign(__assign({}, rest), { classes: classNames(link, { active: active, icon: iconName }, className), computedChildren: (React.createElement(Fragment, null,
            Icon && React.createElement(Icon, { color: fill }),
            label)) });
};
/**
 * @deprecated [#1] since version 4.0.11 [#2] Use Button instead
 * [#3] Will be removed in version 5.0.
 *
 * ExternalLink Component. Visually identical to the Link component, but does not use react-router-dom
 *
 * @example
 * <ExternalLink
 *   href={'https://www.guildeducation.com}
 *   title="external link button"
 *   active
 *   key={`HeaderNavItem-${1}`}
 *   iconName="ArrowLeft" // If you want an icon in front of the link
 * />
 *
 * <ExternalLink href={'https://www.guildeducation.com'} key={`navItem-${1}`}>
 *  link with text child
 * </Link>
 */
export var ExternalLink = function (props) {
    var _a = mapLinkProps(props), classes = _a.classes, computedChildren = _a.computedChildren, rest = __rest(_a, ["classes", "computedChildren"]);
    var linkProps = __assign(__assign({}, rest), { className: classes });
    return React.createElement("a", __assign({}, linkProps), computedChildren);
};
