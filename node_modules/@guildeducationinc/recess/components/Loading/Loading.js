import * as React from 'react';
import classNames from '../../utilities/classnames';
import * as styles from './index.module.css.js';
export var Loading = function (props) {
    var _a = React.useState(props.loaded || false), loaded = _a[0], setLoaded = _a[1];
    var className = props.className, overlay = props.overlay, resolve = props.resolve, showChildrenWhileLoading = props.showChildrenWhileLoading;
    var isLoading = !loaded;
    React.useEffect(function () {
        if (resolve) {
            if (resolve instanceof Promise) {
                resolve.then(function () { return setLoaded(true); });
            }
            else if (typeof resolve === 'function') {
                resolve(function () { return setLoaded(true); });
            }
            else {
                setLoaded(true);
            }
        }
    }, []);
    React.useEffect(function () {
        setLoaded(props.loaded);
    }, [props.loaded]);
    var renderLoader = function () {
        var label = (props.label || "Content") + " " + (isLoading ? 'loading' : 'has loaded');
        return (React.createElement("div", { "aria-label": showChildrenWhileLoading && label, "aria-live": 'assertive', className: classNames(styles.loadingSpinner, className), "data-testid": 'loaderSpinner', role: 'alert' },
            React.createElement("div", { className: styles.dot }),
            React.createElement("div", { className: styles.dot }),
            React.createElement("div", { className: styles.dot }),
            !showChildrenWhileLoading && React.createElement("span", { className: styles.message }, label)));
    };
    if (loaded) {
        return React.createElement("div", { className: 'loaded' }, props.children);
    }
    if (overlay) {
        return (React.createElement("div", { "data-testid": 'loadingOverlay', className: styles.loadingOverlayWrapper },
            React.createElement("div", { className: styles.loadingOverlay },
                React.createElement("div", { className: styles.loadingOverlaySpinner }, renderLoader())),
            showChildrenWhileLoading && props.children));
    }
    return (React.createElement("div", { "aria-busy": isLoading },
        renderLoader(),
        showChildrenWhileLoading && props.children));
};
