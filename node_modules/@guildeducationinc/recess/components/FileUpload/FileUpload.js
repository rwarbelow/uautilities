var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { compose, withState, withHandlers } from 'recompose';
import LoadingComponent from '../Loading';
import { CloudUpload } from '../Icons';
import { fileuploadWrapper, uploadedFile, fileupload, closeButton } from './index.module.css.js';
function proxyEvent(event, files) {
    var type = event.type, target = event.target;
    var required = target.required, name = target.name;
    return { type: type, target: { required: required, name: name, value: files } };
}
function truncateFilename(filename) {
    var max = 20;
    return filename.length > max ? filename.substr(0, max) + "..." : filename;
}
var File = function (_a) {
    var file = _a.file, loading = _a.loading, handleRemoveFile = _a.handleRemoveFile, index = _a.index;
    return (React.createElement("div", { className: uploadedFile },
        loading ? (React.createElement(LoadingComponent, { resolve: function (done) { return setTimeout(done, 750); } },
            React.createElement("img", { alt: '', src: 'https://d30y9cdsu7xlg0.cloudfront.net/png/929008-200.png' }))) : (React.createElement("img", { alt: '', src: 'https://d30y9cdsu7xlg0.cloudfront.net/png/929008-200.png' })),
        React.createElement("span", null, truncateFilename(file.name)),
        React.createElement("span", { role: 'button', tabIndex: '0', onClick: handleRemoveFile(index), onKeyDown: handleRemoveFile(index), className: closeButton }, "X")));
};
function FileUploadComponent(props) {
    var accept = props.accept, name = props.name, label = props.label, required = props.required, disabled = props.disabled, renderFiles = props.renderFiles, handleSetFiles = props.handleSetFiles;
    var fileExtensions = ['.jpg', '.jpeg', '.pdf', '.png', '.doc'];
    if (typeof console === 'object') {
        console.warn('FileUploadComponent is deprecated use FileUploader');
    }
    return (React.createElement("div", { className: fileuploadWrapper, onDragOver: function (e) { return e.preventDefault(); }, onDrop: handleSetFiles },
        renderFiles(),
        React.createElement("div", { className: fileupload },
            React.createElement("input", { type: 'file', multiple: true, id: name, name: name, accept: accept || fileExtensions, required: required, disabled: disabled, onChange: handleSetFiles }),
            React.createElement("label", { htmlFor: name },
                React.createElement(CloudUpload, { size: 48, color: '#b2b2b2' }),
                React.createElement("p", null, label)))));
}
export var FileUpload = compose(withState('files', 'setFiles', function (props) { return props.defaultValue || []; }), withHandlers({
    handleChange: function (_a) {
        var onChange = _a.onChange, onFileUpload = _a.onFileUpload, setFiles = _a.setFiles;
        return function (event, files) {
            var proxy = proxyEvent(event, files);
            if (onFileUpload) {
                return onFileUpload(proxy, function (values) { return setFiles(values); });
            }
            if (onChange)
                onChange(proxy);
            setFiles(files);
        };
    },
}), withHandlers({
    handleSetFiles: function (_a) {
        var files = _a.files, handleChange = _a.handleChange;
        return function (event) {
            var eventFiles = event.dataTransfer ? event.dataTransfer.files : event.target.files;
            var updated = Array.from(eventFiles).concat(files);
            event.preventDefault();
            event.target.value = '';
            handleChange(event, updated);
        };
    },
    handleRemoveFile: function (_a) {
        var files = _a.files, handleChange = _a.handleChange;
        return function (index) { return function (event) {
            var updated = files.filter(function (file, i) { return index !== i; });
            handleChange(event, updated);
        }; };
    },
}), withHandlers({
    renderFiles: function (_a) {
        var name = _a.name, files = _a.files, handleRemoveFile = _a.handleRemoveFile;
        return function () {
            return files.map(function (file, index) {
                var key = "FileUpload-" + name + "-file-" + file.name + "-" + index;
                var fileProps = { key: key, file: file, handleRemoveFile: handleRemoveFile, index: index };
                return index === 0 ? React.createElement(File, __assign({ loading: true }, fileProps)) : React.createElement(File, __assign({}, fileProps));
            });
        };
    },
}))(FileUploadComponent);
