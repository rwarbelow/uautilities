var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { uuid } from '../../utilities/uuid';
import { reset } from './index.module.css.js';
var getPortalId = function (id) { return "portal-" + id; };
/**
 * Portals allow for React content to be rendered into an arbitrary container. The ContainerPortal component
 * serves as the most general version of Portal and allows any content target to be specified
 */
var ContainerPortal = /** @class */ (function (_super) {
    __extends(ContainerPortal, _super);
    function ContainerPortal(props) {
        var _this = _super.call(this, props) || this;
        _this.portalId = uuid();
        _this.state = {
            mounted: false,
        };
        return _this;
    }
    ContainerPortal.prototype.componentDidMount = function () {
        this.contentNode = document.createElement('div');
        this.contentNode.setAttribute('id', getPortalId(this.portalId));
        this.mountContentNode(this.contentNode);
        this.renderContent();
    };
    ContainerPortal.prototype.UNSAFE_componentWillUpdate = function (nextProps) {
        /**
         * It's bad practice to change a portal's container or content while mounted. If this happens,
         * we need to unmount the container (if the container has changed)
         * and unmount the content (if the content has changed)
         */
        var nextContainer = nextProps.containerNode;
        var nextContent = nextProps.Content;
        if (nextContainer !== this.props.containerNode || nextContent !== this.props.Content) {
            this.unmountContent();
            this.unrenderContent();
        }
    };
    ContainerPortal.prototype.componentDidUpdate = function (prevProps) {
        /**
         * It's bad practice to change a portal's container or content while mounted. If this happens
         * and the component has already updated, we need to remmount the content node into the new container
         * and rerender the content
         */
        var oldContainer = prevProps.containerNode;
        var currentContainer = this.props.containerNode;
        var oldContent = prevProps.Content;
        var currentContent = this.props.Content;
        if (oldContainer !== currentContainer || oldContent !== currentContent) {
            this.mountContentNode(this.contentNode);
            this.renderContent();
        }
    };
    ContainerPortal.prototype.componentWillUnmount = function () {
        this.unrenderContent();
        this.unmountContent();
    };
    ContainerPortal.prototype.render = function () {
        var _a = this.props, Content = _a.Content, contentProps = _a.contentProps;
        return this.state.mounted ? (React.createElement("span", { "aria-owns": getPortalId(this.portalId), className: reset }, ReactDOM.createPortal(React.createElement(Content, __assign({}, contentProps)), this.contentNode, this.portalId))) : null;
    };
    ContainerPortal.prototype.mountContentNode = function (contentNode) {
        if (!contentNode || !this.props.containerNode) {
            return;
        }
        this.props.containerNode.appendChild(contentNode);
    };
    ContainerPortal.prototype.renderContent = function () {
        if (!this.contentNode || !this.props.containerNode) {
            return;
        }
        this.setState({ mounted: true });
    };
    ContainerPortal.prototype.unmountContent = function () {
        if (this.portalInstance && this.contentNode) {
            this.setState({ mounted: false });
        }
    };
    ContainerPortal.prototype.unrenderContent = function () {
        if (this.props.containerNode && this.contentNode) {
            this.props.containerNode.removeChild(this.contentNode);
        }
        delete this.portalInstance;
    };
    return ContainerPortal;
}(React.Component));
export { ContainerPortal };
