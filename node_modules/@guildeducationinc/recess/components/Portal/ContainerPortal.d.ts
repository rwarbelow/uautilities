import * as React from 'react';
export interface ContainerPortalProps<P> {
    /**
     * Single element root that will serve as the container for the portal content
     */
    Content: React.ComponentType<P>;
    /**
     * Props to be passed down to the content component when rendered
     */
    contentProps?: P;
    /**
     * The container node that the portal will be mounted into
     */
    containerNode: Element | null;
}
interface PortalState {
    mounted: boolean;
}
/**
 * Portals allow for React content to be rendered into an arbitrary container. The ContainerPortal component
 * serves as the most general version of Portal and allows any content target to be specified
 */
export declare class ContainerPortal<P> extends React.Component<ContainerPortalProps<P>, PortalState> {
    private portalId;
    private contentNode?;
    private portalInstance?;
    constructor(props: ContainerPortalProps<P>);
    componentDidMount(): void;
    UNSAFE_componentWillUpdate(nextProps: ContainerPortalProps<P>): void;
    componentDidUpdate(prevProps: ContainerPortalProps<P>): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private mountContentNode;
    private renderContent;
    private unmountContent;
    private unrenderContent;
}
export {};
