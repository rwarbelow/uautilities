var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* eslint-disable react/no-find-dom-node */
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { Panel } from '../Panel';
import { TooltipWrapper } from './TooltipWrapper';
import { contentWrapper } from './index.module.css.js';
var ArrowHeight = 12;
var TargetOffset = 4;
var TooltipMargin = ArrowHeight + TargetOffset;
var DEFAULT_DELAY = 250;
var Tooltip = /** @class */ (function (_super) {
    __extends(Tooltip, _super);
    function Tooltip(props) {
        var _this = _super.call(this, props) || this;
        _this.renderChildren = function () {
            var child = _this.props.children;
            if (React.Children.count(child) > 1) {
                throw new Error('Tooltips only support one child');
            }
            if (typeof child === 'function') {
                throw new TypeError("Tooltips can only accept children of type string,\n        boolean, number, or ReactElement. Please check the children of the Tooltip");
            }
            if (typeof child === 'string' || typeof child === 'boolean' || typeof child === 'number') {
                return (React.createElement("span", { "aria-describedby": _this.props.id, onMouseEnter: _this.showTooltip, onMouseLeave: _this.hideTooltip }, child));
            }
            var originalOnMouseEnter = child.props.onMouseEnter;
            var originalOnMouseLeave = child.props.onMouseLeave;
            return React.cloneElement(child, {
                'aria-describedby': _this.props.id,
                onMouseEnter: function () {
                    if (typeof originalOnMouseEnter !== 'undefined') {
                        originalOnMouseEnter('windowResize');
                    }
                    _this.showTooltip();
                },
                onMouseLeave: function () {
                    if (typeof originalOnMouseLeave !== 'undefined') {
                        originalOnMouseLeave('windowResize');
                    }
                    _this.hideTooltip();
                },
            });
        };
        _this.renderTooltipContent = function () {
            var tooltipContent = _this.props.TooltipContent;
            if (typeof tooltipContent === 'string') {
                return (React.createElement("div", { className: contentWrapper, onMouseEnter: _this.showTooltip, onMouseLeave: _this.hideTooltip },
                    React.createElement("span", null, tooltipContent)));
            }
            var TooltipContent = tooltipContent;
            return (React.createElement("div", { className: contentWrapper, onMouseEnter: _this.showTooltip, onMouseLeave: _this.hideTooltip },
                React.createElement(TooltipContent, null)));
        };
        _this.showTooltip = function () {
            var _a = _this.props.openDelay, openDelay = _a === void 0 ? DEFAULT_DELAY : _a;
            if (_this.closeTimer !== null) {
                window.clearTimeout(_this.closeTimer);
                _this.closeTimer = null;
            }
            _this.openTimer = window.setTimeout(function () { return _this.setState({ show: true }); }, openDelay);
        };
        _this.hideTooltip = function () {
            var _a = _this.props.closeDelay, closeDelay = _a === void 0 ? DEFAULT_DELAY : _a;
            if (_this.openTimer !== null) {
                window.clearTimeout(_this.openTimer);
                _this.openTimer = null;
            }
            _this.closeTimer = window.setTimeout(_this.closeTooltip, closeDelay);
        };
        _this.closeTooltip = function () { return _this.setState({ show: false }); };
        _this.state = {
            target: null,
            show: false,
        };
        return _this;
    }
    Tooltip.prototype.componentDidMount = function () {
        var target = ReactDOM.findDOMNode(this);
        this.setState({
            target: target,
        });
    };
    Tooltip.prototype.render = function () {
        var preferredPositions = this.props.preferredPositions;
        var _a = this.state, show = _a.show, target = _a.target;
        var tooltipContent = this.props.TooltipContent;
        var TooltipContent = TooltipWrapper(this.renderTooltipContent);
        return (React.createElement(React.Fragment, null,
            this.renderChildren(),
            React.createElement(Panel, { ariaId: this.props.id, onTargetMove: this.closeTooltip, PanelContent: TooltipContent, panelMargin: TooltipMargin, panelProps: this.props.tooltipProps, preferredPositions: preferredPositions, role: 'tooltip', show: show && !!tooltipContent, target: target })));
    };
    return Tooltip;
}(React.PureComponent));
export { Tooltip };
