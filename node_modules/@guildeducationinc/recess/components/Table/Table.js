var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { TableHeader } from '../TableHeader';
import { TableRow } from '../TableRow';
import { tableBody } from './index.module.css.js';
var Table = /** @class */ (function (_super) {
    __extends(Table, _super);
    function Table() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         *   This is here to ensure all cells in a column maintain the same width. Without it, if there is long text in one column and no data in another in the same row, the columns in said row will not line up correctly.
         */
        _this.flexBasisMultiplier = function () {
            var columns = _this.props.columns;
            var totalFlex = 0;
            columns.forEach(function (column) {
                if (column.flex) {
                    totalFlex += column.flex;
                }
                else {
                    totalFlex += 1;
                }
            });
            return totalFlex;
        };
        return _this;
    }
    Table.prototype.render = function () {
        var _a = this.props, testid = _a.testid, columns = _a.columns, className = _a.className, rowClassName = _a.rowClassName, data = _a.data, headerCellRenderer = _a.headerCellRenderer, onSort = _a.onSort, rowActions = _a.rowActions, onRowClick = _a.onRowClick, cellRenderer = _a.cellRenderer, width = _a.width, minWidth = _a.minWidth, maxWidth = _a.maxWidth;
        var flexBasisMultiplier = this.flexBasisMultiplier();
        return (React.createElement("table", { "data-testid": testid, style: { width: width, minWidth: minWidth, maxWidth: maxWidth }, className: className },
            React.createElement(TableHeader, { columns: columns, onSort: onSort, flexBasisMultiplier: flexBasisMultiplier, cellRenderer: headerCellRenderer }),
            React.createElement("tbody", { className: tableBody }, data.map(function (row, i) { return (React.createElement(TableRow, { key: row.id ? row.id : "table-row-" + i, columns: columns, row: row, index: i, rowActions: rowActions, onRowClick: onRowClick, cellRenderer: cellRenderer, flexBasisMultiplier: flexBasisMultiplier, className: rowClassName })); }))));
    };
    return Table;
}(React.PureComponent));
export { Table };
