import { Actions } from '../MenuList/MenuList';
/**
 *  Takes a sort direction of either 'asc' | 'desc'
 */
export declare type SortDirection = 'asc' | 'desc';
/**
 *  Adds a prestyled class to a sell
 */
export declare type CellType = 'currency' | 'date' | 'text' | 'id' | 'number';
export interface Column {
    key: string;
    label?: string;
    sortable?: boolean;
    className?: string;
    sortDirection?: SortDirection;
    minWidth?: number;
    maxWidth?: number;
    width?: number;
    flex?: number;
    type?: CellType;
    wrapText?: boolean;
}
export declare type SortHandler = (columnKey: string, sortDirection: SortDirection) => void;
export declare type CellRenderer = <T>(cellProps: TableCellProps<T>, columnKey: string) => JSX.Element;
export declare type HeaderCellRenderer = (cellProps: HeaderCellProps) => JSX.Element;
export declare type RowClickHandler<T> = (e: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, row: T) => void;
export interface TableProps<T> {
    cellRenderer?: CellRenderer;
    /**
     *  Sets className on table
     */
    className?: string;
    /**
     *  Called when a sortable button is clicked in the a Header Row of a table
     */
    columns: Column[];
    /**
     *  Array of rows in the table. Rows must have keys that correlate with column keys.
     *  ❗️Rows must have `id` defined. Id is used to set the unique key of each table row.
     */
    data: (T & {
        id: number | string;
    })[];
    /**
     *  Function that renders an individual cell. Arguments are (props: HeaderCellProps)
     */
    headerCellRenderer?: HeaderCellRenderer;
    /**
     *  Sets the minWidth of the overall Table. Can only take a number value
     */
    minWidth?: number;
    /**
     *  Sets the maxWidth of the overall Table. Can only take a number value
     */
    maxWidth?: number;
    /**
     *  Function that is called when all rows are clicked. The arguments are (event, row)
     */
    onRowClick?: RowClickHandler<T>;
    /**
     *  Called when a sortable button is clicked in the a Header Row of a table
     */
    onSort?: SortHandler;
    /**
     *  Array of Actions that will be mapped to a menu at the end of each row. You will see this in
     */
    rowActions?: Actions<T>;
    /**
     *  Sets a rowClassName that is applied to every row on the table
     */
    rowClassName?: string;
    /**
     *  String that will be used as a data-testid attribute for automation selection
     */
    testid: string;
    /**
     *  Sets the width of the overall Table. Can take a string and therefore a `100%` value.
     */
    width?: string | number;
}
export interface TableHeaderProps {
    cellRenderer?: HeaderCellRenderer;
    columns: Column[];
    /**
     *  Dynamically calculated value based on the flex value of all table columns
     */
    flexBasisMultiplier: number;
    onSort: SortHandler;
}
export interface TableRowProps<T> {
    cellRenderer: CellRenderer;
    columns: Column[];
    /**
     *  Sets className on table row
     */
    className?: string;
    /**
     *  Dynamically calculated value based on the flex value of all table columns
     */
    flexBasisMultiplier: number;
    index: number;
    row: T;
    rowActions?: Actions<T>;
    onRowClick?: RowClickHandler<T>;
}
export interface TableCellProps<T> {
    data: string;
    rowData: T;
    type: CellType;
    /**
     *  Sets the flex value to dynamically resize the column this cell is in.
     */
    flex: number;
    /**
     *  Sets the width of the Table Cell. Can take a string and therefore a `100%` value.
     */
    width?: string | number;
    /**
     *  Sets the minWidth of the Table Cell. Can only take a number value
     */
    minWidth?: number;
    /**
     *  Sets the maxWidth of the Table Cell. Can only take a number value
     */
    maxWidth?: number;
    /**
     * Optional method that sets renderer of the table cell.
     */
    cellRenderer?: CellRenderer;
    columnKey: string;
    /**
     * Whether cell content wraps or not. Set to true if you DO NOT want to ellipsize cell content.
     *
     * @default false
     */
    wrapText?: boolean;
    /**
     *  Dynamically calculated value based on the flex value of all table columns
     */
    flexBasisMultiplier: number;
    cellClick?: (e: React.MouseEvent<HTMLElement>) => void;
}
export interface HeaderCellProps {
    cellRenderer?: HeaderCellRenderer;
    columnKey: string;
    /**
     *  Sets the flex value to dynamically resize the column this cell is in.
     */
    flex: number;
    label?: string;
    /**
     *  Sets the width of the Header Cell. Can take a string and therefore a `100%` value.
     */
    width?: string | number;
    /**
     *  Sets the minWidth of the Header Cell. Can only take a number value
     */
    minWidth?: number;
    /**
     *  Sets the maxWidth of the Header Cell. Can only take a number value
     */
    maxWidth?: number;
    onSort?: SortHandler;
    sortable?: boolean;
    sortDirection?: SortDirection;
    type: CellType;
    wrapText?: boolean;
    /**
     *  Dynamically calculated value based on the flex value of all table columns
     */
    flexBasisMultiplier: number;
    /**
     *  Sets className on table row
     */
    className?: string;
}
export interface CellActionProps<T, P> {
    rowIndex: number;
    row: T;
    actions: Actions<T, P>;
    type: CellType;
    /**
     *  Sets the flex value to dynamically resize the column this cell is in.
     */
    flex?: number;
    /**
     *  Sets the width of a Cell with an action. Can take a string and therefore a `100%` value.
     */
    width?: string | number;
    /**
     *  Sets the minWidth of a Cell with an action. Can only take a number value
     */
    minWidth?: number;
    /**
     *  Sets the maxWidth of a Cell with an action. Can only take a number value
     */
    maxWidth?: number;
    /**
     *  Dynamically calculated value based on the flex value of all table columns
     */
    flexBasisMultiplier: number;
}
