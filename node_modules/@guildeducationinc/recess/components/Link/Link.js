var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { NavLink } from 'react-router-dom';
import { mapLinkProps, ExternalLink } from '../ExternalLink/ExternalLink';
/**
 * @deprecated [#1] since version 4.0.11 [#2] Use Button instead
 * [#3] Will be removed in version 5.0.
 *
 * Link Component. Visually identical to the ExternalLink component, but does uses react-router.
 *
 * Example Usage
 * ```jsx
 * <Link
 *   to={'/'}
 *   title="link button"
 *   active
 *   key={`HeaderNavItem-${1}`}
 *   useAnchor  // Added if the navigation isn't using react-router (basic anchor tag)
 *   iconName="ArrowLeft" // If you want an icon in front of the link
 * />
 *
 * <Link to={'/'} key={`navItem-${1}`} useAnchor>
 *  link with text child
 * </Link>
 * ```
 */
export var Link = function (props) {
    var to = props.to, useAnchor = props.useAnchor, title = props.title, testid = props.testid, onClick = props.onClick, restProps = __rest(props, ["to", "useAnchor", "title", "testid", "onClick"]);
    var isAbsolute = useAnchor || to.indexOf('http') === 0;
    if (isAbsolute) {
        return React.createElement(ExternalLink, __assign({}, __assign(__assign({}, restProps), { title: title, href: to, testid: testid })));
    }
    var _a = mapLinkProps(props), classes = _a.classes, computedChildren = _a.computedChildren;
    return (React.createElement(NavLink, { to: to, className: classes, title: title, "data-testid": testid, onClick: onClick }, computedChildren));
};
