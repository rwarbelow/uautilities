var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import * as styles from './index.module.css.js';
import { Warning, InfoCircle } from '../Icons';
import classnames from '../../utilities/classnames';
import { IconButton } from '../Button';
import { recessColors } from '../StyleGuide';
import { ToastContent } from './ToastContent';
import { ToastAction } from './ToastAction';
var toastStyles = {
    danger: styles.danger,
    success: styles.success,
    warning: styles.warning,
};
var TOAST_PROPERTIES = {
    danger: {
        icon: Warning,
        iconColor: recessColors.red.base,
        defaultMessage: 'Failure',
    },
    success: {
        icon: InfoCircle,
        iconColor: recessColors.teal.base,
        defaultMessage: 'Success',
    },
    warning: {
        icon: Warning,
        iconColor: recessColors.yellow.base,
        defaultMessage: 'Warning',
    },
};
var Toast = /** @class */ (function (_super) {
    __extends(Toast, _super);
    function Toast(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            show: props.display,
        };
        return _this;
    }
    Toast.prototype.componentDidMount = function () {
        var _this = this;
        if (this.props.autoHide) {
            var _a = this.props, autoHideTime = _a.autoHideTime, onHide_1 = _a.onHide;
            setTimeout(function () {
                _this.setState({ show: false });
                if (onHide_1) {
                    onHide_1();
                }
            }, autoHideTime);
        }
    };
    Toast.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.display !== this.props.display) {
            this.setState({ show: this.props.display });
        }
    };
    Toast.prototype.getChildComponent = function (displayName) {
        var children = this.props.children;
        return (children &&
            React.Children.toArray(children).find(function (child) { return child.type && child.type.displayName === displayName; }));
    };
    Toast.prototype.render = function () {
        var _a = this.props, className = _a.className, children = _a.children, handleToastClose = _a.handleToastClose, _b = _a.hideClose, hideClose = _b === void 0 ? false : _b, _c = _a.message, message = _c === void 0 ? '' : _c, testid = _a.testid, type = _a.type;
        if (!this.state.show) {
            return null;
        }
        var _d = TOAST_PROPERTIES[type], Icon = _d.icon, iconColor = _d.iconColor, defaultMessage = _d.defaultMessage;
        var content = this.getChildComponent('ToastContent');
        var action = this.getChildComponent('ToastAction');
        return (React.createElement("div", { "aria-atomic": true, className: classnames(styles.toast, toastStyles[type], className), "data-testid": testid, role: 'alert' },
            React.createElement(Icon, { color: iconColor, size: 24, className: styles.icon }),
            React.createElement("div", { className: styles.contentWrapper },
                content || (React.createElement("div", { className: styles.body, "data-testid": 'toast-body' },
                    React.createElement("span", { className: styles.message }, message || children || defaultMessage))),
                action),
            !hideClose && (React.createElement(IconButton, { appearance: 'text', className: styles.closeButton, iconName: 'Close', label: 'Close', onClick: handleToastClose, testid: 'toast-close' }))));
    };
    Toast.Content = ToastContent;
    Toast.Action = ToastAction;
    return Toast;
}(React.Component));
export { Toast };
