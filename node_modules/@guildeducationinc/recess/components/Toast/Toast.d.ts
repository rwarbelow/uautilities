import * as React from 'react';
import { ToastAction } from './ToastAction';
interface ToastProps {
    /**
     * Whether Toast should be automatically hidden once alotted time has passed
     *
     * @default false
     */
    autoHide?: boolean;
    /**
     * Time in milliseconds that Toast is displayed for
     *
     * @default 5000
     */
    autoHideTime?: number;
    children?: React.ReactNode;
    className?: string;
    /**
     * Whether toast is visible
     */
    display: boolean;
    /**
     * Callback when toast is closed by clicking close button
     */
    handleToastClose?: (e: React.MouseEvent | React.FormEvent) => void;
    /**
     * Whether toast close button is rendered
     *
     * @default false
     */
    hideClose?: boolean;
    /**
     * Deprecated. Use the Toast.Content child instead. Message string displayed in Toast.
     *
     * @deprecated
     */
    message?: string;
    /**
     * Callback for when Toast is hidden after allotted time.
     */
    onHide?: () => void;
    testid?: string;
    /**
     * The intention of Toast. Directs styling.
     */
    type: 'danger' | 'success' | 'warning';
}
interface ToastState {
    show: boolean;
}
export declare class Toast extends React.Component<ToastProps, ToastState> {
    static Content: React.SFC<import("./ToastContent").ToastContentProps>;
    static Action: typeof ToastAction;
    constructor(props: any);
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    private getChildComponent;
    render(): JSX.Element;
}
export {};
