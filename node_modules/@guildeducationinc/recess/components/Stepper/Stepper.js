var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import classNames from '../../utilities/classnames';
import { stepper, stepperMobileButton, showStepperLine, stepperWrapper } from './index.module.css.js';
import { Panel } from '../Panel';
import { StepperPanel } from './StepperPanel';
import { AlignmentPositions } from '../../utilities/positionCalculator';
import ClickOutside from '../ClickOutside';
import { ChevronDown, ChevronUp } from '../Icons';
import { StepperLink } from './StepperLink';
import { StepperFooter } from './StepperFooter';
import { StepperContent } from './StepperContent';
import { StepperHeader } from './StepperHeader';
var StepperPortal = function (_a) {
    var children = _a.children, onClick = _a.onClick, showLine = _a.showLine;
    /* eslint-disable */
    var clickHandler = function (e) {
        onClick(e);
    };
    return (React.createElement("div", { className: classNames(showLine && showStepperLine), onClick: clickHandler }, children));
    /* eslint-enable */
};
var stepperId = 0;
export var Stepper = function (_a) {
    var children = _a.children, testid = _a.testid, className = _a.className, _b = _a.closePanelOnClick, closePanelOnClick = _b === void 0 ? true : _b, _c = _a.mobileButtonLabel, mobileButtonLabel = _c === void 0 ? 'Navigation' : _c, _d = _a.showLine, showLine = _d === void 0 ? false : _d;
    var _e = React.useState(false), show = _e[0], setShow = _e[1];
    var trigger = React.useRef(null);
    var id = React.useMemo(function () {
        stepperId += 1;
        return testid || "stepper-" + stepperId;
    }, [testid]);
    React.useEffect(function () {
        if (console) {
            // quick linter to make sure you have the component structured correctly
            React.Children.forEach(children, function (child) {
                if (child.type === StepperLink) {
                    console.warn('<Stepper.Link> must be a child of <Stepper.Content>');
                }
                else if (child.type !== StepperHeader &&
                    child.type !== StepperContent &&
                    child.type !== StepperFooter) {
                    console.warn('<Stepper> can only have <Stepper.Content>, <Stepper.Header>, or <Stepper.Footer> as children');
                }
            });
        }
    }, []);
    var toggle = function () {
        setShow(!show);
    };
    var closePanel = function () {
        if (closePanelOnClick) {
            setShow(false);
        }
    };
    var ariaAttrs = {
        'aria-haspopup': true,
        'aria-expanded': show,
        'aria-controls': id + "-StepperMenu",
        'aria-owns': id + "-StepperMenu",
    };
    var panelContentSize = {
        minWidth: (trigger.current && trigger.current.getBoundingClientRect().width) || 100,
    };
    return (React.createElement("div", { "data-testid": id, className: classNames(stepper, className) },
        React.createElement("div", { "data-testid": id + "-StepperContent", className: classNames(stepperWrapper, showLine && showStepperLine) }, children),
        React.createElement(ClickOutside, { active: show, container: trigger.current, onOutsideClick: toggle },
            React.createElement("button", __assign({ className: stepperMobileButton, "data-testid": id + "-StepperPanelTrigger", onClick: toggle, ref: trigger, type: 'button' }, ariaAttrs),
                show ? React.createElement(ChevronUp, { size: 30 }) : React.createElement(ChevronDown, { size: 30 }),
                mobileButtonLabel)),
        React.createElement(Panel, { ariaId: ariaAttrs['aria-owns'], contentSize: panelContentSize, PanelContent: StepperPanel(StepperPortal), panelMargin: 1, panelProps: {
                children: children,
                onClick: closePanel,
                showLine: showLine,
            }, preferredPositions: [AlignmentPositions.bottomLeft], show: show, target: trigger.current, testid: id + "-StepperPanel" })));
};
Stepper.Footer = StepperFooter;
Stepper.Header = StepperHeader;
Stepper.Content = StepperContent;
Stepper.Link = StepperLink;
