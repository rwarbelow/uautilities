var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import classnames from '../../utilities/classnames';
import { CardContent } from '../CardContent/CardContent';
import { CardFooter } from '../CardFooter/CardFooter';
import { CardHeader } from '../CardHeader/CardHeader';
import { card, cardMutedMobile, cardMutedTabletPlus } from './index.module.css.js';
var Card = /** @class */ (function (_super) {
    __extends(Card, _super);
    function Card() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Card.prototype.render = function () {
        var _a = this.props, children = _a.children, testid = _a.testid, mutedTabletPlus = _a.mutedTabletPlus, mutedMobile = _a.mutedMobile, className = _a.className, rest = __rest(_a, ["children", "testid", "mutedTabletPlus", "mutedMobile", "className"]);
        var classes = classnames(card, mutedTabletPlus && cardMutedTabletPlus, mutedMobile && cardMutedMobile, className);
        return (React.createElement("div", __assign({ "data-testid": testid, className: classes }, rest), children));
    };
    Card.Content = CardContent;
    Card.Header = CardHeader;
    Card.Footer = CardFooter;
    return Card;
}(React.PureComponent));
export { Card };
