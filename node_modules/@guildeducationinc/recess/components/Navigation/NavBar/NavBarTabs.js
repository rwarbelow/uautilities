var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import classnames from '../../../utilities/classnames';
import { debounce } from '../../Panel/utils';
import { TabNavigation } from '../TabNavigation';
import { TabDropdown } from '../TabNavigation/TabDropdown';
import * as styles from './index.module.css.js';
import * as React from 'react';
import { ThemeContext } from '../../Theme';
var partitionArray = function (arr, index) {
    if (index < 0) {
        return [arr, []];
    }
    return arr.reduce(function (acc, val, idx) {
        if (idx < index) {
            acc[0].push(val);
        }
        else {
            acc[1].push(val);
        }
        return acc;
    }, [[], []]);
};
export var NavBarTabs = function (_a) {
    var children = _a.children;
    var navRef = React.createRef();
    var maxRef = React.createRef();
    var _b = React.useState(0), currentNavWidth = _b[0], setCurrentWidth = _b[1];
    var _c = React.useState(true), firstRender = _c[0], setFirstRender = _c[1];
    var _d = React.useState([]), thresholds = _d[0], setThresholds = _d[1];
    var _e = React.useState(0), splitIndex = _e[0], setSplitIndex = _e[1];
    var contextTheme = React.useContext(ThemeContext);
    var computedTheme = (contextTheme === null || contextTheme === void 0 ? void 0 : contextTheme.theme) || 'light';
    var navChildren = React.Children.toArray(children);
    var getSplitIndex = function (currentWidth) {
        if (currentWidth < 0) {
            return React.Children.count(children);
        }
        var lastThreshold = thresholds.length === 0
            ? 0
            : thresholds[thresholds.length - 1][1] - thresholds[thresholds.length - 1][0];
        return thresholds.findIndex(function (_a) {
            var min = _a[0], max = _a[1];
            return currentWidth - lastThreshold >= min && currentWidth - lastThreshold < max;
        });
    };
    var configureSize = function () {
        var rect = navRef.current && navRef.current.getBoundingClientRect();
        var width = rect ? rect.width : currentNavWidth;
        var index = getSplitIndex(width);
        setCurrentWidth(width);
        setSplitIndex(index);
    };
    var setInitialSize = function () {
        if (firstRender && maxRef.current) {
            var runningWidth_1 = 0;
            var widthThresholds = Array.from(maxRef.current.querySelector('ul').childNodes).map(function (node) {
                var width = node.getBoundingClientRect().width;
                var newWidth = [runningWidth_1, runningWidth_1 + width];
                runningWidth_1 += width;
                return newWidth;
            });
            setThresholds(widthThresholds);
            setFirstRender(false);
        }
        configureSize();
    };
    var setSize = debounce(configureSize, 50, true);
    React.useEffect(setInitialSize, [maxRef]);
    React.useEffect(function () {
        window.addEventListener('resize', setSize);
        return function () { return window.removeEventListener('resize', setSize); };
    }, [navRef]);
    /**
     * splitIndex represents the index where nav items are moved to in the "More" dropdown.
     * Any nav item with the an index >= splitIndex should be in the "More" dropdown,
     * and any index < splitIndex should remain in the NavBar.
     */
    var _f = partitionArray(navChildren, splitIndex >= 0 ? Math.max(1, splitIndex) : splitIndex), first = _f[0], more = _f[1];
    return (React.createElement(React.Fragment, null,
        firstRender && (React.createElement(TabNavigation, { className: classnames(styles.mainNavTabs, styles.measure), ariaLabel: 'Main Navigation', testid: 'mainMeasureNav', forwardedRef: maxRef },
            children,
            React.createElement(TabDropdown, { actions: [], className: classnames(styles[computedTheme]), dropdownId: 'firstRenderMore' }, "More"))),
        React.createElement(TabNavigation, { className: styles.mainNavTabs, ariaLabel: 'Main Navigation', testid: 'mainNav', forwardedRef: navRef, theme: computedTheme },
            first.map(function (navChild, idx) {
                var _a;
                return React.cloneElement(navChild, {
                    className: classnames(navChild.props.className, (_a = {},
                        _a[styles.hidden] = idx >= splitIndex && splitIndex > 0,
                        _a)),
                });
            }),
            more.length > 0 ? (React.createElement(TabDropdown, { actions: more.map(function (item) {
                    return __assign(__assign({}, item.props), { type: 'link', name: item.props.children });
                }), className: classnames(styles[computedTheme]), dropdownId: 'moreActions' }, "More")) : null)));
};
NavBarTabs.displayName = 'NavBarTabs';
