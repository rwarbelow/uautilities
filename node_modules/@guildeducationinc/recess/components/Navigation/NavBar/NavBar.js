var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable @typescript-eslint/no-explicit-any */
import * as React from 'react';
import classnames from '../../../utilities/classnames';
import { AppBar } from '../AppBar';
import { IconButton, Button } from '../../Button';
import { Slider } from '../../Slider';
import { TabNavigation } from '../TabNavigation';
import { UserActions as UserActionsComponent } from './UserActions';
import * as styles from './index.module.css.js';
import { ThemeContextProvider, ThemeContext } from '../../Theme/index';
import { TabLink } from '../TabNavigation/TabLink';
export function NavBar(_a) {
    var children = _a.children, testid = _a.testid, passedTheme = _a.theme;
    var contextTheme = React.useContext(ThemeContext);
    var theme = passedTheme || (contextTheme === null || contextTheme === void 0 ? void 0 : contextTheme.theme) || 'light';
    var Navigation = React.Children.toArray(children).find(function (child) { return child.type.displayName === 'NavBarTabs'; });
    var Brand = React.Children.toArray(children).find(function (child) { return child.type.displayName === 'Brand'; });
    var CustomAction = React.Children.toArray(children).find(function (child) { return child.type.displayName === 'CustomAction'; });
    var UserActions = React.Children.toArray(children).find(function (child) { return child.type.displayName === 'UserActions'; });
    var mobileMenuButtonRef = React.useRef(null);
    var _b = React.useState(false), open = _b[0], setOpen = _b[1];
    var mergeUserActionProps = function () {
        return Object.assign(UserActionsComponent.defaultProps, 
        // eslint-disable-next-line prettier/prettier
        UserActions.props);
    };
    var ActionProps = UserActions ? mergeUserActionProps() : undefined;
    var LoggedInTabActions = function () {
        return ActionProps.loggedinActions
            .filter(function (action) { return !action.Component || action.Component.displayName !== 'Button'; })
            .map(function (action) { return (React.createElement(TabLink, __assign({}, action, { key: "key" + action.name }), action.name)); });
    };
    var LoggedInButtonActions = function () {
        return ActionProps.loggedinActions
            .filter(function (action) { return action.Component && action.Component.displayName === 'Button'; })
            .map(function (_a, idx) {
            var Component = _a.Component, name = _a.name, rest = __rest(_a, ["Component", "name"]);
            return (React.createElement(Component, __assign({ key: idx }, rest, { fullWidth: true }), name));
        });
    };
    var renderSliderContent = function () { return (React.createElement(AppBar, { testid: 'appBar', Element: 'div', className: styles.mobileMenu },
        React.createElement("div", { className: styles.mobileMenuWrapper },
            React.createElement(TabNavigation, { testid: 'tabNavigation', vertical: true, ariaLabel: 'Main Navigation' },
                Navigation ? Navigation.props.children : [],
                ActionProps &&
                    (ActionProps.loggedIn ? (LoggedInTabActions()) : (React.createElement("div", { className: styles.mobileActions },
                        ActionProps.hideSecondaryAction || (React.createElement(Button, { testid: 'secondary-logged-out', appearance: 'outline', onClick: ActionProps.onSecondaryClick, href: ActionProps.secondaryHref }, ActionProps.secondaryTitle)),
                        ActionProps.hidePrimaryAction || (React.createElement(Button, { testid: 'primary-logged-out', appearance: 'primary', onClick: ActionProps.onPrimaryClick, href: ActionProps.primaryHref }, ActionProps.primaryTitle)))))),
            ActionProps &&
                (ActionProps.loggedIn ? (React.createElement("div", { className: styles.customActionContainer },
                    LoggedInButtonActions(),
                    " ")) : null),
            React.createElement("div", { className: styles.customActionContainer }, CustomAction)))); };
    var handleCloseSlider = function () {
        setOpen(false);
        if (mobileMenuButtonRef.current) {
            mobileMenuButtonRef.current.focus();
        }
    };
    return (React.createElement(ThemeContextProvider, { value: { theme: theme } },
        React.createElement(AppBar, { testid: testid },
            React.createElement("div", { className: classnames(styles.desktopNavBar) }, children),
            React.createElement("div", { className: styles.mobileNav, "data-testid": 'mobileNav' },
                Brand,
                React.createElement("div", null,
                    React.createElement(Slider, { id: 'mobileNav', isOpen: open, onClose: handleCloseSlider, sliderContent: renderSliderContent(), testid: 'slider', topOffset: 65 },
                        React.createElement(IconButton, { appearance: 'text', className: styles.menuButton, iconName: open ? 'Close' : 'Menu', label: 'Open Mobile Nav', onClick: function () { return setOpen(!open); }, ref: mobileMenuButtonRef, testid: 'mobileMenuTrigger' })))))));
}
