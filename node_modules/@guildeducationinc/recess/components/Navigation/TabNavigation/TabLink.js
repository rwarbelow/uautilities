var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import * as tabNavStyles from './index.module.css.js';
import classnames from '../../../utilities/classnames';
export function TabLink(props) {
    var _a;
    var children = props.children, className = props.className, _b = props.current, current = _b === void 0 ? false : _b, href = props.href, testid = props.testid, _c = props.Component, Component = _c === void 0 ? 'a' : _c, rest = __rest(props, ["children", "className", "current", "href", "testid", "Component"]);
    /**
     * This needs to be cast asy any beacuse Typescript cannot handle thge case when a Component prop is pass with generic props T.
     * It cannot infer that the `...rest` props should be of type T and that the Component should accept them.
     */
    var CastComponent = Component;
    return (React.createElement("li", { className: classnames((_a = {}, _a[tabNavStyles.current] = current, _a), className), tabIndex: -1 },
        React.createElement(CastComponent, __assign({ "aria-current": current ? 'page' : undefined, href: href, "data-testid": testid, title: children.toString() }, rest), children)));
}
TabLink.displayName = 'TabLink';
