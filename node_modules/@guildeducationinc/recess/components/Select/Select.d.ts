import * as React from 'react';
import { InputErrorProps } from '../../types/InputTypes';
export interface SelectOption {
    disabled?: boolean;
    label: string;
    value: string;
    [x: string]: any;
}
export interface SelectChangeEvent {
    label: string;
    name?: string;
    value: string;
    target: HTMLInputElement;
    selection: SelectOption;
}
export interface SelectProps extends InputErrorProps {
    /**
     * Optional class name that gets added to select trigger button.
     */
    className?: string;
    /**
     * Whether Select trigger is disabled.
     *
     * @default false
     */
    disabled?: boolean;
    /**
     * Additional information that is displayed in a tooltip next to the input label.
     */
    additionalInfo?: React.ComponentType | string;
    /**
     * Optional prop to control rendering of label since `label` prop should be provided even if you don't want to render a label.
     *
     * @default false
     */
    hideLabel?: boolean;
    /**
     * Unique id that will be used to associate Select label, trigger and dropdown
     */
    id?: string;
    /**
     * Custom ref to attach to base input element.
     */
    innerRef?: React.RefObject<any>;
    /**
     * Label for Select. This value should always be provided for optimal
     * accessibility. You can use the `hideLabel` prop if you do not want label rendered.
     */
    label?: string;
    /**
     * Used to mimic a native input event in Select.
     */
    name?: string;
    /**
     * Fires when select input is blurred
     */
    onBlur?: (event: React.FocusEvent<HTMLButtonElement>) => void;
    onChange: (event: SelectChangeEvent) => void;
    /**
     * Array of options you want in the select dropdown.
     */
    options: SelectOption[];
    /**
     * Optional placeholder rendered when no value has been selected.
     */
    placeholder?: string;
    /**
     * Whether selection is required.
     *
     * @default false
     */
    required?: boolean;
    testid?: string;
    /**
     * Whether SelectList is rendered within Panel. If false, just the SelectList is rendered when open.
     *
     * @default true
     */
    usePortal?: boolean;
    /**
     * Current value of select.
     */
    value: string;
}
interface SelectState {
    currentValue?: string;
    focusedIndex: number;
    minWidth: number | null;
    open: boolean;
}
export declare class _Select extends React.PureComponent<SelectProps, SelectState> {
    private triggerRef;
    private inputRef;
    private uid;
    private labelId;
    constructor(props: SelectProps);
    getSelectId(): string;
    componentDidMount(): void;
    private handleChange;
    private onListClose;
    private closeList;
    private toggle;
    private handleListKeyboardNav;
    private handleButtonKeyboardNav;
    private renderPanel;
    render(): JSX.Element;
    private defaultFocusState;
    private incrementFocus;
    private open;
    private focusLast;
    private focusFirst;
    private decrementFocus;
    private getPlaceholder;
    private setFocus;
    private resetFocus;
    private focusTrigger;
}
declare const _default: React.ForwardRefExoticComponent<SelectProps & React.RefAttributes<_Select>>;
export default _default;
