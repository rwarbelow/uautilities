import * as React from 'react';
import classnames from '../../utilities/classnames';
import { disabledOption, focusedListOption, optionLabel, optionLabelChecked, selectItemSvgIconFill, listOption, } from './index.module.css.js';
import { Keys } from '../../utilities/keyboard';
import { CheckboxIcon } from '../Icons';
import { preventDefault } from '../../utilities/preventDefault';
import { focusElement } from '../MultiSelect/focusHelper';
import { scrollElementInView } from '../MultiSelect/scrollHelper';
export var SelectItem = React.memo(function (props) {
    var _a, _b;
    var label = props.option.label, checked = props.checked, focused = props.focused, index = props.index, _c = props.disabled, disabled = _c === void 0 ? false : _c, toggleChecked = props.toggleChecked;
    var optionRef = React.useRef(null);
    React.useEffect(function () {
        if (focused) {
            focusElement(optionRef.current, true);
            scrollElementInView(optionRef.current, {
                behavior: 'smooth',
                block: 'nearest',
                inline: 'start',
            });
        }
    }, [focused]);
    var onSelect = function (e) {
        e.preventDefault();
        e.stopPropagation();
        if (!disabled) {
            toggleChecked({ index: index, checked: !checked });
        }
    };
    var onKeyDown = function (e) {
        e.preventDefault();
        if (!disabled) {
            switch (e.key) {
                case Keys.Enter:
                case Keys.Space:
                    toggleChecked({ index: index, checked: !checked });
                    break;
            }
        }
    };
    var classes = classnames(listOption, (_a = {},
        _a[focusedListOption] = focused,
        _a[disabledOption] = disabled,
        _a[optionLabelChecked] = checked,
        _a));
    return (React.createElement("li", { role: 'option', "data-testid": '_select-option', "aria-disabled": disabled, "aria-selected": checked, className: classes, tabIndex: 0, ref: optionRef, onKeyDown: onKeyDown, onClick: onSelect, onFocus: preventDefault },
        React.createElement("span", { "data-testid": '_select-option-label', className: classnames(optionLabel, (_b = {}, _b[optionLabelChecked] = checked, _b)) }, label),
        checked && React.createElement(CheckboxIcon, { size: 20, color: selectItemSvgIconFill })));
});
