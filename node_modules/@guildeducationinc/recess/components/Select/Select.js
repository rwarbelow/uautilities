var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import classnames from '../../utilities/classnames';
import { Keys } from '../../utilities/keyboard';
import { AlignmentPositions } from '../../utilities/positionCalculator';
import { ClickOutside } from '../ClickOutside';
import { ErrorList } from '../ErrorList';
import { ArrowDropDown, ArrowDropUp, InfoCircle } from '../Icons';
import { Panel } from '../Panel';
import * as styles from './index.module.css.js';
import { SelectList } from './SelectList';
import { SelectPanel } from './SelectPanel';
import { Tooltip } from '../Tooltip';
var selectIter = 1;
/* eslint-disable @typescript-eslint/class-name-casing */
var _Select = /** @class */ (function (_super) {
    __extends(_Select, _super);
    function _Select(props) {
        var _this = _super.call(this, props) || this;
        _this.handleChange = function (_a) {
            var index = _a.index;
            var toggledOption = _this.props.options[index];
            _this.setState({
                currentValue: toggledOption.value,
            }, function () {
                _this.props.onChange({
                    label: toggledOption.label,
                    name: _this.props.name,
                    target: _this.inputRef.current,
                    value: toggledOption.value,
                    selection: toggledOption,
                });
            });
            _this.closeList();
        };
        _this.onListClose = function () {
            _this.resetFocus();
            _this.focusTrigger();
        };
        _this.closeList = function () {
            _this.setState({ open: false });
            _this.resetFocus();
            _this.focusTrigger();
        };
        _this.toggle = function () {
            _this.setState({ open: !_this.state.open });
        };
        _this.handleListKeyboardNav = function (e) {
            switch (e.key) {
                case Keys.ArrowUp:
                    _this.decrementFocus();
                    break;
                case Keys.ArrowDown:
                    _this.incrementFocus();
                    break;
                case Keys.Home:
                    _this.focusFirst();
                    break;
                case Keys.End:
                    _this.focusLast();
                    break;
                case Keys.Escape:
                    _this.closeList();
            }
        };
        _this.handleButtonKeyboardNav = function (e) {
            switch (e.key) {
                case Keys.ArrowUp:
                case Keys.ArrowDown:
                    _this.open();
                    break;
            }
        };
        selectIter += 1;
        _this.uid = "select-component--" + selectIter;
        _this.triggerRef = React.createRef();
        _this.inputRef = props.innerRef ? props.innerRef : React.createRef();
        _this.state = {
            minWidth: null,
            open: false,
            currentValue: props.value,
            focusedIndex: _this.defaultFocusState(),
        };
        return _this;
    }
    _Select.prototype.getSelectId = function () {
        return this.props.id || this.uid;
    };
    _Select.prototype.componentDidMount = function () {
        if (!this.state.minWidth && this.triggerRef.current) {
            this.setState({
                minWidth: this.triggerRef.current.getBoundingClientRect().width,
            });
        }
    };
    _Select.prototype.renderPanel = function () {
        var _a;
        var _b = this.props, disabled = _b.disabled, label = _b.label, _c = _b.usePortal, usePortal = _c === void 0 ? true : _c, testid = _b.testid;
        var _d = this.state, currentValue = _d.currentValue, focusedIndex = _d.focusedIndex, minWidth = _d.minWidth, open = _d.open;
        var show = open && !disabled;
        var PanelContent = SelectPanel(SelectList);
        var panelProps = {
            onListClose: this.onListClose,
            options: this.props.options,
            selectedValue: currentValue || '',
            closeList: this.closeList,
            focusedIndex: focusedIndex,
            handleKeyboardNav: this.handleListKeyboardNav,
            handleChange: this.handleChange,
            id: this.getSelectId() + "-SelectContent",
            labelledBy: this.labelId,
        };
        if (usePortal) {
            return (React.createElement(Panel, { show: show, target: this.triggerRef.current, PanelContent: PanelContent, panelProps: panelProps, preferredPositions: [AlignmentPositions.bottomLeft], contentSize: { minWidth: minWidth }, panelMargin: 4, testid: testid ? testid + "--selectPanel" : undefined }));
        }
        if (!usePortal && show) {
            return (React.createElement("div", { className: classnames(styles.nonPortalDropdown, (_a = {},
                    _a[styles.nonPortalDropdownNoLabel] = !label,
                    _a)) },
                React.createElement(PanelContent, __assign({}, panelProps))));
        }
    };
    _Select.prototype.render = function () {
        var _a, _b, _c, _d, _e;
        var _f = this.props, className = _f.className, disabled = _f.disabled, errors = _f.errors, additionalInfo = _f.additionalInfo, hideLabel = _f.hideLabel, isInvalid = _f.isInvalid, label = _f.label, name = _f.name, testid = _f.testid, _g = _f.usePortal, usePortal = _g === void 0 ? true : _g;
        var open = this.state.open;
        var show = open && !disabled;
        var errorList = errors ? (Array.isArray(errors) ? errors : [errors]) : [];
        var hasError = isInvalid || errorList.length > 0;
        this.labelId = this.getSelectId() + '-label';
        var sharedClasses = classnames((_a = {},
            _a[styles.open] = open,
            _a[styles.error] = hasError,
            _a[styles.disabled] = disabled,
            _a));
        var classes = classnames(styles.selectTrigger, sharedClasses, className);
        var tooltipId = additionalInfo && (label === null || label === void 0 ? void 0 : label.replace(' ', '-').toLowerCase()) + "-info";
        return (React.createElement("div", { "data-testid": testid ? testid + "--wrapper" : undefined, className: styles.selectFieldWrapper },
            React.createElement("div", { className: classnames((_b = {}, _b[styles.usingNonPortalDropdown] = !usePortal, _b)) },
                label && (React.createElement("div", { className: styles.labelWrapper },
                    React.createElement("label", { className: classnames(styles.label, sharedClasses, (_c = {}, _c[styles.hidden] = hideLabel, _c)), "data-testid": testid ? testid + "--label" : undefined, id: this.labelId }, label),
                    additionalInfo && (React.createElement(Tooltip, { TooltipContent: additionalInfo, id: tooltipId, preferredPositions: [AlignmentPositions.topMiddle] },
                        React.createElement(InfoCircle, { size: 24, "aria-label": 'More info' }))))),
                React.createElement(ClickOutside, { onOutsideClick: this.closeList, active: open, container: this.triggerRef.current },
                    React.createElement("button", { "aria-disabled": disabled, "aria-expanded": open || undefined, "aria-haspopup": 'listbox', "aria-labelledby": this.labelId + " " + this.getSelectId(), className: classes, "data-testid": testid, disabled: disabled, onBlur: this.props.onBlur, onClick: this.toggle, onKeyDown: this.handleButtonKeyboardNav, ref: this.triggerRef, type: 'button' // this must by a button to prevent it from submitting forms
                     },
                        React.createElement("span", { id: this.getSelectId(), "data-testid": testid ? testid + "--placeholder" : undefined, className: styles.selectPlaceholder }, this.getPlaceholder()),
                        show ? (React.createElement(ArrowDropUp, { size: 16, className: classnames(styles.svgArrows, (_d = {},
                                _d[styles.disabled] = this.props.disabled,
                                _d)) })) : (React.createElement(ArrowDropDown, { size: 16, className: classnames(styles.svgArrows, (_e = {},
                                _e[styles.disabled] = this.props.disabled,
                                _e)) }))),
                    this.renderPanel()),
                React.createElement("input", { "data-testid": testid ? testid + "--input" : undefined, id: this.getSelectId(), name: name, ref: this.inputRef, type: 'hidden', required: this.props.required, value: this.state.currentValue || '' })),
            React.createElement(ErrorList, { errors: errorList, show: errorList.length > 0, global: false })));
    };
    _Select.prototype.defaultFocusState = function () {
        var _a = this.props, options = _a.options, selectedValue = _a.value;
        var firstSelectedIndex = options.findIndex(function (_a) {
            var value = _a.value;
            return selectedValue === value;
        });
        return firstSelectedIndex > -1 ? firstSelectedIndex : 0;
    };
    _Select.prototype.incrementFocus = function () {
        var newIndex = (this.state.focusedIndex + 1) % this.props.options.length;
        this.setFocus(newIndex);
    };
    _Select.prototype.open = function () {
        this.setState({ open: true });
    };
    _Select.prototype.focusLast = function () {
        var newIndex = this.props.options.length - 1;
        this.setFocus(newIndex >= 0 ? newIndex : 0);
    };
    _Select.prototype.focusFirst = function () {
        this.setFocus(0);
    };
    _Select.prototype.decrementFocus = function () {
        var calculatedIndex = this.state.focusedIndex - 1;
        var newIndex = calculatedIndex < 0 ? calculatedIndex + this.props.options.length : calculatedIndex;
        this.setFocus(newIndex);
    };
    _Select.prototype.getPlaceholder = function () {
        var currentValue = this.state.currentValue;
        if (currentValue) {
            var opt = this.props.options.find(function (obj) { return obj.value === currentValue; });
            if (opt) {
                return opt.label;
            }
        }
        return this.props.placeholder || 'Choose Option';
    };
    _Select.prototype.setFocus = function (index) {
        this.setState({ focusedIndex: index });
    };
    _Select.prototype.resetFocus = function () {
        this.setFocus(this.defaultFocusState());
    };
    _Select.prototype.focusTrigger = function () {
        return this.triggerRef.current && this.triggerRef.current.focus();
    };
    return _Select;
}(React.PureComponent));
export { _Select };
export default React.forwardRef(function (props, ref) { return React.createElement(_Select, __assign({ innerRef: ref }, props)); });
