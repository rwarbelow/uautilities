var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import PropTypes from 'prop-types';
import classNames from '../../utilities/classnames';
import { compose, withState, withHandlers, defaultProps } from 'recompose';
import { LOGOS_GUILD, LOGOS_G_ADMIN } from '../../constants/guild-logos';
import { detectIE } from '../../utilities/detectIE';
import { Deprecated } from '../Deprecated';
import { CoBrand } from '../Navigation/CoBrand';
import { MobileNavigation } from './MobileNavigation';
import { SubNavigation } from './SubNavigation';
import { UserMenu } from './UserMenu';
import { Link } from '../Link';
import { withTheme } from '../ThemeContext/withTheme';
import { Menu, Close } from '../Icons';
import { header, headerWrapper, cobrand, headerBranding, headerAdmin, headerNav, headerNavItem, } from './index.module.css.js';
import { headerNavMobileToggle } from './MobileNavigation/index.module.css.js';
function HeaderComponent(props) {
    var _a, _b;
    var closeUserMenuOnOutsideClick = props.closeUserMenuOnOutsideClick, homeUrl = props.homeUrl, partnerLogo = props.partnerLogo, navItems = props.navItems, subNavItems = props.subNavItems, userMenuItems = props.userMenuItems, isLoggedIn = props.isLoggedIn, isAdmin = props.isAdmin, signUpLink = props.signUpLink, logInLink = props.logInLink, location = props.location, actionButton = props.actionButton, onSignUpClick = props.onSignUpClick, onLogInclick = props.onLogInclick, theme = props.theme, firstName = props.firstName;
    var mobileNavProps = {
        isLoggedIn: isLoggedIn,
        signUpLink: signUpLink,
        logInLink: logInLink,
        userMenuItems: userMenuItems,
        onSignUpClick: onSignUpClick,
        onLogInclick: onLogInclick,
    };
    var logo = isAdmin
        ? LOGOS_G_ADMIN.g_admin_color + ".svg"
        : LOGOS_GUILD.filter(function (logo) { return logo.name === 'guild_nav'; })[0].path + ".svg";
    var cobrandLogoPresent = theme && theme.logos && theme.logos.navLogo;
    if (cobrandLogoPresent) {
        logo = theme.logos.navLogo;
    }
    else {
        logo = detectIE() ? logo.replace(/\.svg$/, '.png') : logo;
    }
    var href = location.href, pathname = location.pathname, hash = location.hash;
    var determineIsActive = function (item) {
        return item.active || item.to === href || item.to === "" + pathname + hash;
    };
    // determine active links for navItems, user menu, and subnav
    for (var i = 0; i < navItems.length; i++) {
        navItems[i].active = determineIsActive(navItems[i]);
    }
    for (var i = 0; i < userMenuItems.length; i++) {
        userMenuItems[i].active = determineIsActive(userMenuItems[i]);
    }
    for (var i = 0; i < subNavItems.length; i++) {
        subNavItems[i].active = determineIsActive(subNavItems[i]);
    }
    var mobileNavItems = navItems.concat(subNavItems);
    return (React.createElement(Deprecated, { currentComponent: 'Header', newComponent: 'Navigation' },
        React.createElement("div", null,
            React.createElement("header", { className: classNames(header, (_a = {}, _a[headerAdmin] = isAdmin, _a)) },
                React.createElement("div", { className: classNames('wrapper', headerWrapper), "data-testid": 'header-wrapper' },
                    React.createElement("div", { className: classNames(headerBranding, (_b = {}, _b[cobrand] = cobrandLogoPresent, _b)) },
                        React.createElement("a", { href: homeUrl },
                            React.createElement("img", { src: logo, alt: 'Guild Education' })),
                        partnerLogo && React.createElement(CoBrand, { logo: partnerLogo })),
                    navItems.length > 0 && (React.createElement("nav", { className: headerNav, "data-testid": 'nav-items' }, navItems.map(function (_a, index) {
                        var to = _a.to, label = _a.label, useAnchor = _a.useAnchor, active = _a.active, testid = _a.testid;
                        return (React.createElement(Link, { testid: testid, to: to, active: active, key: "HeaderNavItem-" + index, useAnchor: useAnchor, className: headerNavItem }, label));
                    }))),
                    typeof actionButton === 'function' && actionButton(),
                    React.createElement(UserMenu, { closeOnOutsideClick: closeUserMenuOnOutsideClick, firstName: firstName, menuItems: userMenuItems, isLoggedIn: isLoggedIn, signUpLink: signUpLink, logInLink: logInLink, onSignUpClick: onSignUpClick, onLogInclick: onLogInclick }),
                    React.createElement("div", { onClick: props.toggleMobileNav, onKeyDown: props.toggleMobileNav, className: headerNavMobileToggle, "data-testid": 'header-nav-mobile-toggle', role: 'button', tabIndex: '0' }, props.mobileNavOpen ? (React.createElement(Close, { size: 24, color: '#595959' })) : (React.createElement(Menu, { size: 24, color: '#595959' }))))),
            subNavItems.length > 0 && React.createElement(SubNavigation, { navItems: subNavItems }),
            React.createElement(MobileNavigation, __assign({}, mobileNavProps, { isOpen: props.mobileNavOpen, onClose: props.toggleMobileNav, navItems: mobileNavItems, onSignUpClick: onSignUpClick, onLogInclick: onLogInclick })))));
}
HeaderComponent.propTypes = {
    /** True if user menu should close on an outside click */
    closeUserMenuOnOutsideClick: PropTypes.bool,
    /** Logo link  */
    homeUrl: PropTypes.string,
    /** If present, used to create Cobrand component  */
    partnerLogo: PropTypes.string,
    /** Main navigation links  */
    navItems: PropTypes.arrayOf(PropTypes.object),
    /** Secondary row of navigation links  */
    subNavItems: PropTypes.arrayOf(PropTypes.object),
    /** Links in the user icon on right side  */
    userMenuItems: PropTypes.arrayOf(PropTypes.object),
    /** True if user is logged in  */
    isLoggedIn: PropTypes.bool,
    /** True if user is admin */
    isAdmin: PropTypes.bool,
    /** Link to register  */
    signUpLink: PropTypes.string,
    /** Link to log in  */
    logInLink: PropTypes.string,
    /** URL location - used to determine active link */
    location: PropTypes.shape({
        href: PropTypes.string,
        pathname: PropTypes.string,
        hash: PropTypes.string,
    }),
};
HeaderComponent.defaultProps = {
    homeUrl: '/',
    isLoggedIn: false,
    isAdmin: false,
    navItems: [],
    subNavItems: [],
    userMenuItems: [],
    signUpLink: 'https://www.guildeducation.com/users/sign_up',
    logInLink: 'https://www.guildeducation.com/users/sign_in',
};
export var Header = compose(defaultProps({
    closeUserMenuOnOutsideClick: false,
    homeUrl: '/',
    isLoggedIn: false,
    isAdmin: false,
    navItems: [],
    subNavItems: [],
    userMenuItems: [],
    signUpLink: 'https://www.guildeducation.com/users/sign_up',
    logInLink: 'https://www.guildeducation.com/users/sign_in',
    location: { href: '', pathname: '', hash: '' },
}), withState('mobileNavOpen', 'setMobileNavOpen', false), withHandlers({
    toggleMobileNav: function (_a) {
        var mobileNavOpen = _a.mobileNavOpen, setMobileNavOpen = _a.setMobileNavOpen;
        return function () {
            document.body.classList.toggle('disable-scrolling');
            setMobileNavOpen(!mobileNavOpen);
        };
    },
}), withTheme)(HeaderComponent);
