import React from 'react';
import classNames from '../../../utilities/classnames';
import { compose, withHandlers } from 'recompose';
import Link from '../../Link';
import { headerNavMobileOverlay, headerNavMobile, open as openNav, headerNavMobileItems, headerNavMobileItem, } from './index.module.css.js';
function MobileNavigationRender(props) {
    var _a, _b;
    var isOpen = props.isOpen, onClose = props.onClose, navItems = props.navItems, userMenuItems = props.userMenuItems, isLoggedIn = props.isLoggedIn, signUpLink = props.signUpLink, logInLink = props.logInLink, onSignUpClick = props.onSignUpClick, onLogInclick = props.onLogInclick;
    var menuItems = navItems.concat(isLoggedIn
        ? userMenuItems
        : [
            { to: signUpLink, label: 'Sign Up', accountItem: true },
            { to: logInLink, label: 'Log In', accountItem: true },
        ]);
    var handleClick = function (to) {
        if (to === signUpLink && onSignUpClick) {
            onSignUpClick();
        }
        else if (to === logInLink && onLogInclick) {
            onLogInclick();
        }
        onClose();
    };
    return (React.createElement("div", { role: 'button', tabIndex: '0', onClick: props.handleOverlayClick, onKeyDown: props.handleOverlayClick, className: classNames(headerNavMobileOverlay, (_a = {}, _a[openNav] = isOpen, _a)) },
        React.createElement("nav", { className: classNames(headerNavMobile, (_b = {}, _b[openNav] = isOpen, _b)) },
            React.createElement("div", { className: headerNavMobileItems, "data-testid": 'header-nav-mobile-items' }, menuItems.map(function (_a, index) {
                var to = _a.to, label = _a.label, useAnchor = _a.useAnchor, active = _a.active, accountItem = _a.accountItem;
                return (React.createElement(Link, { onClick: function () { return handleClick(to); }, className: headerNavMobileItem, style: { backgroundColor: accountItem ? 'white' : '' }, to: to, active: active, useAnchor: useAnchor, key: "MobileNavItem-" + index }, label));
            })))));
}
export var MobileNavigation = compose(withHandlers({
    handleOverlayClick: function (props) { return function (event) {
        if (event.target.classList.contains(headerNavMobileOverlay)) {
            props.onClose();
        }
    }; },
}))(MobileNavigationRender);
