var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { compose, withState, withHandlers, defaultProps } from 'recompose';
import { Autocomplete } from '../Autocomplete';
import { multiAutocompleteItem, multiAutocompleteItemRemove } from './index.module.css.js';
var getDisplay = function (item) { return item.display || item.label || item.value; };
function MultiAutocompleteComponent(props) {
    var filteredItems = props.filteredItems, values = props.values, getDisplayForValue = props.getDisplayForValue, removeItem = props.removeItem, rest = __rest(props, ["filteredItems", "values", "getDisplayForValue", "removeItem"]);
    var autocompleteProps = __assign({ items: filteredItems(), clearOnSelect: true }, rest);
    return (React.createElement("div", null,
        React.createElement(Autocomplete, __assign({}, autocompleteProps)),
        values.length > 0 &&
            values.map(function (item, i) {
                var key = "MultiAutocomplete-item-" + item + "-" + i;
                return (React.createElement("div", { key: key, className: multiAutocompleteItem },
                    getDisplayForValue(item),
                    React.createElement("button", { type: 'button', "aria-label": "Remove " + getDisplay(item), onClick: removeItem(item), disabled: props.disabled, className: multiAutocompleteItemRemove }, "\u00D7")));
            })));
}
export var MultiAutocomplete = compose(defaultProps({
    items: [],
    onValueChange: function (x) { return x; },
    onChange: function (x) { return x; },
}), withState('values', 'setValues', function (props) { return props.values || []; }), withHandlers({
    onSelect: function (_a) {
        var values = _a.values, setValues = _a.setValues, onValueChange = _a.onValueChange;
        return function (_a) {
            var value = _a.value;
            var updated = values.concat([value]);
            setValues(updated);
            onValueChange(updated);
        };
    },
    getDisplayForValue: function (_a) {
        var items = _a.items;
        return function (value) {
            var item = items.filter(function (item) { return item.value === value; })[0];
            return item ? getDisplay(item) : value;
        };
    },
    filteredItems: function (_a) {
        var values = _a.values, items = _a.items;
        return function () {
            return items.filter(function (item) { return values.indexOf(item.value) === -1; });
        };
    },
    removeItem: function (_a) {
        var values = _a.values, setValues = _a.setValues, onValueChange = _a.onValueChange;
        return function (item) { return function () {
            var updated = values.filter(function (value) { return value !== item; });
            setValues(updated);
            onValueChange(updated);
        }; };
    },
}))(MultiAutocompleteComponent);
