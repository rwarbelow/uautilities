import * as React from 'react';
import { AlignmentPositions } from '../../utilities/positionCalculator';
import { TargetMoveReason, ContentSizing } from '../Panel/Panel';
export interface PopoverProps<P> {
    /**
     * Sets min/max width and/or height of Popover content.
     */
    contentSize?: ContentSizing;
    /**
     * Boolean that reverses the color palette of the popover
     */
    dark?: boolean;
    /**
     * Unique id that gets set on Popover content and is referenced by the element that triggers Popover. Important for accessibility.
     */
    id: string;
    /**
     * Popovers track click events outside of the Popover content and the trigger.
     *
     * Callback when a click happens outside of the popover content.
     *
     * Example use cases include wanting to close/dismiss a popover when a user clicks
     * outside.
     */
    onOutsideClick?: () => void;
    /**
     * Popovers track if the target is moved by listing to a target's scroll parent and to window
     * resize events.
     *
     * Callback for when a target moves due to either scrolling or windowResize
     *
     * Example use cases include wanting to close a popover if a user scrolls or resizes the window.
     * By default, Popovers try to reposition themseles to best fit the new space if the window resizes
     * or the parent element scrolls.
     */
    onTargetMove?: (reason: TargetMoveReason) => void;
    /**
     * React Component that renders the popover content.
     */
    PopoverContent: React.ComponentType<P>;
    /**
     * Props of that PopoverContent that are passed in at render time
     */
    popoverProps?: P;
    /**
     * Array of preferred alignment posiitions for the popover relative to the target
     */
    preferredPositions?: AlignmentPositions[];
    /**
     * Boolean that states to show the popover or not.
     * Popovers do not maintain internal visibility state and are controlled by outside components
     */
    show: boolean;
    testid?: string;
}
interface PopoverState {
    target: Element | null;
}
/**
 * Popovers are ephemeral UI elements around a target that are usually
 * triggered open by some user action (normally a click).
 * They do not block the rest of the UI like a modal.
 *
 * Example Usage
 * ```jsx
 *  <Popover
 *    show={state.show}
 *   >
 *    <button onClick={() => setState({ show: !state.show })}>Click to Trigger Popover </button>
 *  </Popover>
 * ```
 */
export declare class Popover<P> extends React.PureComponent<PopoverProps<P>, PopoverState> {
    constructor(props: PopoverProps<P>);
    componentDidMount(): void;
    private handleKeyDown;
    private renderChildren;
    render(): JSX.Element;
}
export {};
