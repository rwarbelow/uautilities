var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* eslint-disable react/no-find-dom-node */
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { Panel } from '../Panel';
import { PopoverWrapperFactory } from './PopoverWrapperFactory';
import ClickOutside from '../ClickOutside';
import { Keys } from '../../utilities/keyboard';
var ArrowHeight = 12;
var TargetOffset = 4;
var PopoverMargin = ArrowHeight + TargetOffset;
/**
 * Popovers are ephemeral UI elements around a target that are usually
 * triggered open by some user action (normally a click).
 * They do not block the rest of the UI like a modal.
 *
 * Example Usage
 * ```jsx
 *  <Popover
 *    show={state.show}
 *   >
 *    <button onClick={() => setState({ show: !state.show })}>Click to Trigger Popover </button>
 *  </Popover>
 * ```
 */
var Popover = /** @class */ (function (_super) {
    __extends(Popover, _super);
    function Popover(props) {
        var _this = _super.call(this, props) || this;
        _this.handleKeyDown = function (event) {
            if (event.key === Keys.Escape) {
                _this.props.onOutsideClick();
            }
        };
        _this.renderChildren = function () {
            var child = React.Children.only(_this.props.children);
            return React.cloneElement(child, {
                'aria-describedby': _this.props.show ? _this.props.id : undefined,
                onKeyDown: _this.handleKeyDown,
            });
        };
        _this.state = {
            target: null,
        };
        return _this;
    }
    Popover.prototype.componentDidMount = function () {
        var target = ReactDOM.findDOMNode(this);
        this.setState({
            target: target,
        });
    };
    Popover.prototype.render = function () {
        var _a = this.props, dark = _a.dark, onOutsideClick = _a.onOutsideClick, onTargetMove = _a.onTargetMove, PopoverContent = _a.PopoverContent, popoverProps = _a.popoverProps, preferredPositions = _a.preferredPositions, show = _a.show;
        var Content = PopoverWrapperFactory(dark)(PopoverContent);
        return (React.createElement(ClickOutside, { onOutsideClick: onOutsideClick, active: show },
            this.renderChildren(),
            React.createElement(Panel, { ariaId: this.props.id, contentSize: this.props.contentSize, onTargetMove: onTargetMove, PanelContent: Content, panelMargin: PopoverMargin, panelProps: popoverProps, preferredPositions: preferredPositions, role: 'tooltip', show: show, target: this.state.target, testid: this.props.testid })));
    };
    return Popover;
}(React.PureComponent));
export { Popover };
