var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import classNames from '../../utilities/classnames';
import * as React from 'react';
import ErrorList from '../ErrorList';
import { RadioInput } from './RadioInput';
import { Tooltip } from '../Tooltip';
import { InfoCircle } from '../Icons';
import { AlignmentPositions } from '../../utilities/positionCalculator';
import * as styles from './index.module.css.js';
var Fragment = React.Fragment;
export var RadioButtons = React.forwardRef(function (props, ref) {
    var _a;
    var errors = props.errors, groupLabel = props.groupLabel, additionalInfo = props.additionalInfo, isInvalid = props.isInvalid, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, readOnly = props.readOnly, selectedValue = props.selectedValue, type = props.type, values = props.values;
    var errorList = errors ? (Array.isArray(errors) ? errors : [errors]) : [];
    var hasError = isInvalid || errorList.length > 0;
    var tooltipId = additionalInfo && (groupLabel === null || groupLabel === void 0 ? void 0 : groupLabel.replace(' ', '-').toLowerCase()) + "-info";
    return (React.createElement(Fragment, null,
        React.createElement("div", { className: styles.radioButtons },
            React.createElement("fieldset", null,
                React.createElement("legend", null,
                    React.createElement("div", { className: styles.labelWrapper },
                        React.createElement("span", { className: classNames((_a = {},
                                _a[styles.error] = hasError,
                                _a)) }, groupLabel),
                        additionalInfo && (React.createElement(Tooltip, { TooltipContent: additionalInfo, id: tooltipId, preferredPositions: [AlignmentPositions.topMiddle] },
                            React.createElement(InfoCircle, { size: 24, "aria-label": 'More info' }))))),
                values.map(function (_a, index) {
                    var id = _a.id, value = _a.value, label = _a.label, disabled = _a.disabled, rest = __rest(_a, ["id", "value", "label", "disabled"]);
                    var effectiveId = id || name + "-" + value;
                    var checked = value === selectedValue;
                    var inputProps = __assign(__assign({}, rest), { 'aria-invalid': hasError || undefined, checked: checked, disabled: readOnly || disabled, id: effectiveId, label: label,
                        name: name,
                        onBlur: onBlur,
                        onChange: onChange,
                        onFocus: onFocus,
                        type: type,
                        value: value });
                    return (React.createElement(RadioInput, __assign({ key: "radio-group-item-" + index }, inputProps, { ref: ref })));
                })),
            React.createElement(ErrorList, { errors: errorList, show: errorList.length > 0, global: false }))));
});
RadioButtons.displayName = 'RadioButtons';
