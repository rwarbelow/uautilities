/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 *
 * @description
 * A helper for normalizing focus behavior across browsers.
 *
 * A browsers default focus behavior (eg `element.focus()`) will scroll an element into
 * view if it's not already visible within it's scroll-parent. However, the HTML standard
 * allows for an option of `preventScroll` that allows the user to customize this behavior. This method
 * normalizes this behavior across all browsers.
 *
 *  @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Browser_compatibility
 * `IE11` does NOT support this option.
 *
 *
 * @see https://msdn.microsoft.com/en-us/ie/ms536738(v=vs.94)
 * However, `IE11` supports a method called `setActive` which does provides a way to focus an element without scrolling it into view.
 *
 */
export var focusElement = function (element, preventScroll) {
    if (preventScroll === void 0) { preventScroll = true; }
    if (!preventScroll) {
        /**
         * If we are not preventing the scroll of a focused element, then `element.focus()` provides the same
         *  behavior in all browsers
         */
        element.focus();
    }
    else {
        if (typeof element.setActive !== 'undefined') {
            /**
             * Otherwise, if we are preventing scroll AND `setActive` is defined, then we are in `IE11` a can use
             * `setActive`
             */
            element.setActive();
        }
        else {
            /**
             * Else we can use the `focus` method with the HTML spec option `preventScroll`
             */
            element.focus({ preventScroll: true });
        }
    }
};
