import * as React from 'react';
import classnames from '../../utilities/classnames';
import * as styles from './index.module.css.js';
import { Keys } from '../../utilities/keyboard';
import { Checkbox } from '../Checkbox/Checkbox';
import { stopPropagation } from '../../utilities/stopPropagation';
import { preventDefault } from '../../utilities/preventDefault';
import { focusElement } from './focusHelper';
import { scrollElementInView } from './scrollHelper';
export var MultiSelectItem = React.memo(function (props) {
    var _a, _b;
    var checked = props.checked, focused = props.focused, id = props.id, index = props.index, isOptionDisabled = props.isOptionDisabled, _c = props.option, value = _c.value, label = _c.label, subItem = _c.subItem, toggleChecked = props.toggleChecked;
    var optionRef = React.useRef(null);
    var disabled = isOptionDisabled ? isOptionDisabled(props.option) : props.disabled;
    React.useEffect(function () {
        if (props.focused) {
            focusElement(optionRef.current, true);
            scrollElementInView(optionRef.current, {
                behavior: 'smooth',
                block: 'nearest',
                inline: 'start',
            });
        }
    }, [props.focused]);
    var onSelect = function () {
        var option = props.option;
        if (!disabled) {
            toggleChecked({ index: index, checked: !checked, option: option });
        }
    };
    var onKeyDown = function (e) {
        if (!focused)
            return;
        switch (e.key) {
            case Keys.Enter:
            case Keys.Space:
                onSelect();
                break;
        }
        preventDefault(e);
    };
    var classes = classnames(styles.listOption, (_a = {},
        _a[styles.focusedListOption] = focused,
        _a[styles.disabledOption] = disabled,
        _a[styles.subItem] = subItem,
        _a));
    var itemLabel = typeof props.getOptionLabel === 'undefined' ? label : props.getOptionLabel(props.option);
    return (React.createElement("li", { "aria-disabled": disabled, "aria-selected": checked, className: classes, "data-testid": '_multiselect-option', id: id, onClick: onSelect, onKeyDown: onKeyDown, ref: optionRef, role: 'option', tabIndex: 0 },
        React.createElement(Checkbox, { size: 20, checked: checked, disabled: disabled }),
        React.createElement("input", { "data-testid": '_multiselect-option-input', className: styles.nativeCheckbox, tabIndex: -1, type: 'checkbox', checked: checked, "aria-checked": checked, value: value, "aria-disabled": disabled, onClick: stopPropagation, onChange: onSelect }),
        React.createElement("span", { "data-testid": '_multiselect-option-label', className: classnames(styles.optionLabel, (_b = {}, _b[styles.optionLabelChecked] = checked, _b)) }, itemLabel)));
});
