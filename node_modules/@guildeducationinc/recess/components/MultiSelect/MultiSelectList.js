var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as styles from './index.module.css.js';
import { MultiSelectItem } from './MultiSelectItem';
import { SubItem } from './MultiSelectSubItem';
import { includes } from 'lodash';
var MultiSelectList = /** @class */ (function (_super) {
    __extends(MultiSelectList, _super);
    function MultiSelectList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MultiSelectList.prototype.componentWillUnmount = function () {
        !this.props.noPanel && this.props.onListClose();
    };
    MultiSelectList.prototype.render = function () {
        var _this = this;
        var _a = this.props, focusedIndex = _a.focusedIndex, focusedOption = _a.focusedOption, handleKeyboardNav = _a.handleKeyboardNav, isOptionDisabled = _a.isOptionDisabled, label = _a.label, labelId = _a.labelId, options = _a.options, selectedValues = _a.selectedValues, toggleChecked = _a.toggleChecked;
        return (React.createElement("ul", { "aria-activedescendant": focusedOption.toString(), "aria-label": label, "aria-labelledby": labelId, "aria-multiselectable": true, className: styles.listOptions, "data-testid": '_multiselect-menu-list', onKeyDown: handleKeyboardNav, role: 'listbox', tabIndex: 0 }, options.map(function (option, idx) {
            var checked = includes(selectedValues, option.value);
            if (option.options) {
                var updatedProps = Object.assign({}, __assign(__assign({}, _this.props), { label: option.label, options: option.options }));
                return (React.createElement(SubItem, __assign({ index: idx, focused: focusedOption === option.value, key: option.label, disabled: isOptionDisabled ? isOptionDisabled(option) : option.disabled, toggleChecked: toggleChecked, label: option.label, option: option, focusedIndex: focusedIndex, options: option.options, isOptionDisabled: _this.props.isOptionDisabled, getOptionLabel: _this.props.getOptionLabel, id: option.label }, updatedProps)));
            }
            return (React.createElement(MultiSelectItem, __assign({ index: idx, focused: focusedOption === option.value, key: option.label, checked: checked, disabled: isOptionDisabled ? isOptionDisabled(option) : option.disabled, toggleChecked: toggleChecked, option: option, id: label }, _this.props)));
        })));
    };
    return MultiSelectList;
}(React.PureComponent));
export { MultiSelectList };
