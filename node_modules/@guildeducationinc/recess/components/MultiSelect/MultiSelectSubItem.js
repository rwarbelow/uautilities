var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable jsx-a11y/role-supports-aria-props */
/* eslint-disable jsx-a11y/no-static-element-interactions */
import * as React from 'react';
import { listOption, activeFill, nativeCheckbox, optionLabel, optionLabelChecked, focusedListOption, disabledOption, } from './index.module.css.js';
import { MultiSelectList } from './MultiSelectList';
import classnames from '../../utilities/classnames';
import { Keys } from '../../utilities/keyboard';
import { Checkbox } from '../Checkbox/Checkbox';
import { stopPropagation } from '../../utilities/stopPropagation';
import { preventDefault } from '../../utilities/preventDefault';
import { ChevronDown, ChevronUp, CheckboxIndeterminate } from '../Icons/systemIcons';
import { includes } from 'lodash';
import { focusElement } from './focusHelper';
export var SubItem = function (props) {
    var _a, _b;
    var useState = React.useState, useRef = React.useRef, useEffect = React.useEffect;
    var optionRef = useRef(null);
    var _c = useState(props.checked || false), open = _c[0], toggleOpen = _c[1];
    var options = props.options, selectedValues = props.selectedValues, focused = props.focused;
    var hasChildChecked = options.find(function (option) { return includes(selectedValues, option.value); }) && true;
    var isDisabled = props.isOptionDisabled ? props.isOptionDisabled(props.option) : props.disabled;
    var classes = classnames(listOption, 'flex--1 flexJustify--space_between', (_a = {},
        _a[focusedListOption] = props.focused,
        _a[disabledOption] = isDisabled,
        _a));
    var subOptionValues = options
        .map(function (option) {
        return !(props.isOptionDisabled ? props.isOptionDisabled(option) : option.disabled) && option.value;
    })
        .filter(function (x) { return x; });
    var hasAllSelected = subOptionValues.every(function (op) { return includes(selectedValues, op); });
    var removeSubItemProps = function () {
        // This removes the extra props that were passed to the sub item so
        // the child multiSelectList has Only the necessary props and
        // causes issues down the flow
        var updatedSubItemOptions = options.map(function (op) {
            return __assign(__assign({}, op), { subItem: true });
        });
        var updatedProps = Object.assign({}, __assign(__assign({}, props), { options: updatedSubItemOptions }));
        delete updatedProps.option;
        delete updatedProps.label;
        delete updatedProps.disabled;
        delete updatedProps.focused;
        return updatedProps;
    };
    var toggleSubMenu = function (e) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (isDisabled)
                        return [2 /*return*/];
                    stopPropagation(e);
                    return [4 /*yield*/, toggleOpen(!open)];
                case 1:
                    _a.sent();
                    props.updateAllOptions(props.option.value, !open);
                    return [2 /*return*/];
            }
        });
    }); };
    var selectAll = function (e) {
        if (isDisabled)
            return;
        var isOptionDisabled = props.isOptionDisabled;
        stopPropagation(e);
        var addedOptions = [props.option];
        options.map(function (option) {
            var isDisabled = isOptionDisabled ? isOptionDisabled(option) : option.disabled;
            if (!isDisabled) {
                option.subItem && delete option.subItem;
                addedOptions = addedOptions.concat(option);
            }
        });
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        props.toggleChecked({
            index: null,
            checked: true,
            option: addedOptions,
            batched: props.option.value,
        });
        !open && toggleSubMenu(e);
    };
    var removeAll = function (e) {
        if (isDisabled)
            return;
        var isOptionDisabled = props.isOptionDisabled;
        stopPropagation(e);
        var removedOptions = [];
        options.map(function (option) {
            var isDisabled = isOptionDisabled ? isOptionDisabled(option) : option.disabled;
            if (!isDisabled && includes(selectedValues, option.value)) {
                option.subItem && delete option.subItem;
                removedOptions = removedOptions.concat(option);
            }
        });
        props.toggleChecked({
            index: null,
            checked: false,
            option: removedOptions,
            batched: props.option.value,
        });
    };
    var handleUserKeyPress = function (event) {
        var focused = props.focused, option = props.option, updateAllOptions = props.updateAllOptions;
        if (!focused)
            return;
        var key = event.key;
        switch (key) {
            case Keys.Enter:
            case Keys.Space:
                hasChildChecked ? removeAll(event) : selectAll(event);
                break;
            case Keys.ArrowRight:
                if (!open) {
                    toggleOpen(true);
                    updateAllOptions(option.value, true);
                }
                break;
            case Keys.ArrowLeft:
                if (open) {
                    toggleOpen(false);
                    updateAllOptions(option.value, false);
                }
                break;
        }
        preventDefault(event);
    };
    useEffect(function () {
        focused && focusElement(optionRef.current, true);
    }, [focused]);
    var multiSelectListProps = removeSubItemProps();
    var itemLabel = typeof props.getOptionLabel === 'undefined' ? props.label : props.getOptionLabel(props.option);
    return (React.createElement(React.Fragment, null,
        React.createElement("li", { "aria-disabled": isDisabled, "aria-selected": hasChildChecked, className: classes, "data-testid": '_multiselect-sub-option', id: props.id, onClick: hasChildChecked ? removeAll : selectAll, onFocus: preventDefault, onKeyDown: handleUserKeyPress, ref: optionRef, role: 'treeitem', tabIndex: 0 },
            React.createElement("span", { className: 'flex flexDirection--row flexItems--center' },
                hasChildChecked && !hasAllSelected ? (React.createElement(CheckboxIndeterminate, { className: activeFill, size: 20 })) : (
                /**
                 * This span is given a fixed width and height to make alignment play with well in IE11.
                 * In all other browsers, we could use a `flex` display on the inline `span` element
                 * to collapse it to it's childrens height, but in IE the height will take up the
                 * height of its parent container, which causes issues with center alignment
                 */
                React.createElement("span", { onClick: hasChildChecked ? removeAll : selectAll, "data-testid": '_multiselect-option-checkbox', style: { height: 20, width: 20 } },
                    React.createElement(Checkbox, { size: 20, checked: hasChildChecked, disabled: isDisabled }))),
                React.createElement("input", { "data-testid": '_multiselect-indeterminate-option-input' // this naming is weird
                    , className: nativeCheckbox, tabIndex: -1, type: 'checkbox', checked: open, "aria-checked": open, "aria-disabled": isDisabled, onClick: stopPropagation, onChange: stopPropagation }),
                React.createElement("span", { "data-testid": '_multiselect-sub-option-label', className: classnames(optionLabel, (_b = {},
                        _b[optionLabelChecked] = hasChildChecked,
                        _b)) }, itemLabel)),
            React.createElement("span", { onClick: toggleSubMenu, className: 'flex width--1/5 flexJustify--end' }, open ? (React.createElement(ChevronUp, { color: '#01a8a5', size: 18 })) : (React.createElement(ChevronDown, { color: '#01A8A5', size: 18 })))),
        open && React.createElement(MultiSelectList, __assign({}, multiSelectListProps))));
};
