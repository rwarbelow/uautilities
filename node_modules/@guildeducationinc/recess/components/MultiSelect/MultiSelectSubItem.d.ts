import * as React from 'react';
import { Option } from './MultiSelectList';
export interface SubItemProps {
    checked?: boolean;
    /**
     * Boolean for if this item is disabled
     */
    disabled?: boolean;
    /**
     * Boolean saying if the option is focused
     */
    focused: boolean;
    /**
     * Passed to MultiSelectList component.
     */
    focusedIndex: number;
    /**
     * Passed to MultiSelectList component
     */
    focusedOption: string | number;
    /**
     * Optional function to allow for custom labels
     */
    getOptionLabel?: (option: Option) => string;
    /**
     * Passed to MultiSelectList component
     */
    handleKeyboardNav: (e: React.KeyboardEvent) => void;
    /**
     * Required id that is used to set aria-activedescendant on the parent ul
     * Currently this is being set to the option label in `MultiSelectList`
     *
     * @default option.label
     */
    id: string;
    /**
     * The index of the item in the list of options
     */
    index: number;
    /**
     * Method returning a boolean that sets disabled state of item
     */
    isOptionDisabled?: (option: Option) => boolean;
    /**
     * The label of the top level option
     *
     * @default option.label
     */
    label: string;
    /**
     * Passed to MultiSelectList component
     */
    onListClose: () => void;
    /**
     * Option to be rendered
     */
    option: Option;
    /**
     * Array of options within the parent option
     */
    options: Option[];
    /**
     * Array of option values that are currently selected
     */
    selectedValues: (string | number)[];
    toggleChecked: (args: {
        index: number;
        checked: boolean;
        option: Option | Option[];
        batched: string | number;
    }) => void;
    updateAllOptions: (key: string | number, open: boolean) => void;
}
export declare const SubItem: (props: SubItemProps) => JSX.Element;
