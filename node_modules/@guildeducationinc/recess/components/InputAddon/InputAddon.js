var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { inputAddon, inputAddonAppend, inputAddonErrors, inputAddonField, inputAddonFocus, inputAddonHasAppend, inputAddonHasPrepend, inputAddonHover, inputAddonPrepend, } from './index.module.css.js';
import classnames from '../../utilities/classnames';
var InputAddon = /** @class */ (function (_super) {
    __extends(InputAddon, _super);
    function InputAddon() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isHovered: false,
            isFocused: false,
        };
        _this.handleFocus = function () {
            _this.setState({ isFocused: true });
        };
        _this.handleBlur = function () {
            _this.setState({ isFocused: false, isHovered: false });
        };
        _this.handleMouseOver = function () {
            _this.setState({ isHovered: true });
        };
        _this.handleMouseOut = function () {
            _this.setState({ isHovered: false });
        };
        return _this;
    }
    InputAddon.prototype.render = function () {
        var _a = this.props, append = _a.append, prepend = _a.prepend, className = _a.className, children = _a.children, hasErrors = _a.hasErrors, hovered = _a.hovered, focused = _a.focused, testid = _a.testid;
        var _b = this.state, isHovered = _b.isHovered, isFocused = _b.isFocused;
        if (append || prepend) {
            var classes = classnames(inputAddon, className, append && inputAddonHasAppend, prepend && inputAddonHasPrepend, (isHovered || hovered) && inputAddonHover, (isFocused || focused) && inputAddonFocus, hasErrors && inputAddonErrors);
            var eventProps_1 = {
                onFocus: this.handleFocus,
                onBlur: this.handleBlur,
                onMouseOver: this.handleMouseOver,
                onMouseOut: this.handleMouseOut,
            };
            var newChildren = React.Children.map(children, function (child) {
                if (child.type === 'input') {
                    return React.cloneElement(child, eventProps_1);
                }
                return React.createElement("div", __assign({}, eventProps_1), child);
            });
            return (React.createElement("div", { className: classes, "data-testid": testid },
                (prepend && React.createElement("div", { className: inputAddonAppend }, prepend)) || null,
                React.createElement("div", { className: inputAddonField }, newChildren),
                (append && React.createElement("div", { className: inputAddonPrepend }, append)) || null));
        }
        return children;
    };
    return InputAddon;
}(React.PureComponent));
export { InputAddon };
