var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { AlignmentPositions } from '../../utilities/positionCalculator';
var getCenterArrowPosition = function (position, targetPosition, contentStyles) {
    var _a = document.documentElement, scrollLeft = _a.scrollLeft, scrollTop = _a.scrollTop;
    if (position === AlignmentPositions.bottomMiddle || position === AlignmentPositions.topMiddle) {
        var horizontalTargetMiddle = targetPosition.left + targetPosition.width / 2 - contentStyles.left + scrollLeft;
        return {
            left: horizontalTargetMiddle,
        };
    }
    if (position === AlignmentPositions.rightMiddle || position === AlignmentPositions.leftMiddle) {
        var verticalTargetMiddle = targetPosition.top + targetPosition.height / 2 - contentStyles.top + scrollTop;
        return {
            top: verticalTargetMiddle,
        };
    }
    return null;
};
var PanelContentWrapperFactory = function (config) { return function (Content) {
    var PanelContent = React.forwardRef(function (props, ref) {
        var targetPosition = props.targetPosition, positionName = props.positionName;
        return (React.createElement("div", { className: config.wrapperClassName, "data-testid": props.testid, id: props.ariaId, ref: ref, role: props.role, style: __assign({}, props.positionStyles) },
            config.arrowBaseClass ? (React.createElement("div", { className: config.arrowBaseClass + " " + props.arrowPosition, style: getCenterArrowPosition(positionName, targetPosition, props.positionStyles) })) : null,
            React.createElement("div", { className: 'height--full overflow--auto' },
                React.createElement(Content, __assign({}, props)))));
    });
    PanelContent.displayName = "PanelContent" + Content.displayName;
    return PanelContent;
}; };
/**
 *
 * Need to memoize to perserve references for Portal/Panel
 */
function memoizeContent(fn) {
    var lastSeenResult = null;
    var lastSeenContent = null;
    // tslint:disable-next-line: no-shadowed-variable
    return function (PanelContent) {
        if (lastSeenContent === null ||
            (lastSeenContent !== null && lastSeenContent !== PanelContent)) {
            lastSeenContent = PanelContent;
            lastSeenResult = fn(PanelContent);
            return lastSeenResult;
        }
        return lastSeenResult;
    };
}
function MemoWrapperFactory(config) {
    var fn = PanelContentWrapperFactory(config);
    return memoizeContent(fn);
}
export default MemoWrapperFactory;
