import { AlignmentPositions } from '../../utilities/positionCalculator';
export var debounce = function (func, wait, immediate) {
    var timeout;
    return function executedFunction() {
        var context = this;
        // eslint-disable-next-line prefer-rest-params
        var args = arguments;
        var later = function () {
            timeout = null;
            if (!immediate) {
                func.apply(context, args);
            }
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = window.setTimeout(later, wait);
        if (callNow) {
            func.apply(context, args);
        }
    };
};
export var shouldTranslateTop = function (position) {
    return position === AlignmentPositions.topLeft ||
        position === AlignmentPositions.topMiddle ||
        position === AlignmentPositions.topRight;
};
export var shouldTranslateRight = function (position) {
    return position === AlignmentPositions.rightTop ||
        position === AlignmentPositions.rightMiddle ||
        position === AlignmentPositions.rightBottom;
};
export var shouldTranslateBottom = function (position) {
    return position === AlignmentPositions.bottomLeft ||
        position === AlignmentPositions.bottomMiddle ||
        position === AlignmentPositions.bottomRight;
};
export var shouldTranslateLeft = function (position) {
    return position === AlignmentPositions.leftBottom ||
        position === AlignmentPositions.leftMiddle ||
        position === AlignmentPositions.leftTop;
};
export var getYTranslationDirection = function (position) {
    if (shouldTranslateTop(position)) {
        return -1;
    }
    if (shouldTranslateBottom(position)) {
        return 1;
    }
    return 0;
};
export var getXTranslationDirection = function (position) {
    if (shouldTranslateLeft(position)) {
        return -1;
    }
    if (shouldTranslateRight(position)) {
        return 1;
    }
    return 0;
};
export var translate = function (base, _a) {
    var margin = _a.margin, translation = _a.translation;
    return base + margin + translation;
};
export var translatePosition = function (margin, translation) {
    if (translation === void 0) { translation = {}; }
    return function (position, target) {
        var deltaY = translation.deltaY, deltaX = translation.deltaX;
        return {
            top: translate(target.top, {
                margin: margin * getYTranslationDirection(position),
                translation: typeof deltaY === 'undefined' ? 0 : deltaY.originOffset * deltaY.getDirection(position),
            }),
            right: target.right,
            bottom: target.bottom,
            left: translate(target.left, {
                margin: margin * getXTranslationDirection(position),
                translation: typeof deltaX === 'undefined' ? 0 : deltaX.originOffset * deltaX.getDirection(position),
            }),
            height: target.height,
            width: target.width,
        };
    };
};
export var getWindowClientRect = function () { return ({
    top: 0,
    right: window.innerWidth,
    bottom: window.innerHeight,
    left: 0,
    height: window.innerHeight,
    width: window.innerWidth,
}); };
export var isScrolledElementVisible = function (target, container) {
    if (!target || !container) {
        return false;
    }
    var targetPos = target.getBoundingClientRect();
    var containerPos = container === window ? getWindowClientRect() : container.getBoundingClientRect();
    return (targetPos.bottom > containerPos.top && containerPos.top + containerPos.height > targetPos.top);
};
