var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { getPosition, mapPositionToPage, } from '../../utilities/positionCalculator';
import EventEmitter from '../../utilities/EventEmitter';
import { Portal } from '../Portal';
import { getScrollParent } from './getScrollParent';
import { debounce, getWindowClientRect, isScrolledElementVisible, translatePosition, } from './utils';
import * as arrowStyles from './index.module.css.js';
import { isBrowser } from '../../utilities/isBrowser';
var resizeEmitter = new EventEmitter();
if (isBrowser()) {
    window.addEventListener('resize', function (e) { return resizeEmitter.emit('resize', e); }, { passive: true });
}
var DefaultMaxWidth = 500;
var OFF_SCREEN_OFFSET = -10000;
var getDefaultStyles = function (_a) {
    if (_a === void 0) { _a = {}; }
    var maxWidth = _a.maxWidth, rest = __rest(_a, ["maxWidth"]);
    return (__assign({ top: OFF_SCREEN_OFFSET, left: OFF_SCREEN_OFFSET, position: 'absolute', zIndex: 9999, maxWidth: maxWidth || DefaultMaxWidth }, rest));
};
var nullBoundingRect = {
    top: 0,
    right: 0,
    bottom: 0,
    height: 0,
    left: 0,
    width: 0,
};
/**
 * Panel is an internal component that combines the Portal and position helper
 * to render content near a target. It handles the logic around
 * attaching the event handlers, calculating the position of content, and updating
 * the position of the content when the target moves due to a window resize
 *
 * Generally used as a composable component used interally by recess, if you need
 * to use `Panel` for a custom component, see `Tooltip`, `Popover`, and `Dropdown`
 * for examples of how to use.
 */
var Panel = /** @class */ (function (_super) {
    __extends(Panel, _super);
    function Panel(props) {
        var _this = _super.call(this, props) || this;
        _this.calculateInitialPosition = function () {
            _this.setState({
                contentStyles: getDefaultStyles(_this.props.contentSize),
                position: null,
            }, _this.calculatePosition);
        };
        _this.calculatePosition = function () {
            var container = getWindowClientRect();
            if (!_this.props.target || !_this.content.current) {
                return;
            }
            var targetBoundingRect = (_this.props.target && _this.props.target.getBoundingClientRect()) || nullBoundingRect;
            var contentBoundingRect = (_this.content.current && _this.content.current.getBoundingClientRect()) || nullBoundingRect;
            var _a = getPosition(targetBoundingRect, __assign(__assign({}, contentBoundingRect), { height: Math.max(_this.state.maxHeight, contentBoundingRect.height), width: Math.max(contentBoundingRect.width, _this.state.maxWidth) }), container, _this.props.preferredPositions, translatePosition(_this.props.panelMargin, _this.props.translation)) || {
                position: nullBoundingRect,
                positionName: 'bottomRight',
            }, rawPosition = _a.position, positionName = _a.positionName;
            var boundedPosition = mapPositionToPage(rawPosition);
            _this.setState({
                contentStyles: __assign(__assign({}, _this.state.contentStyles), { top: boundedPosition.top, left: boundedPosition.left, height: boundedPosition.height, width: boundedPosition.width }),
                position: positionName,
                maxHeight: Math.max(_this.state.maxHeight, contentBoundingRect.height),
                maxWidth: Math.max(contentBoundingRect.width, _this.state.maxWidth),
            });
        };
        _this.onWindowResize = function () {
            if (typeof _this.props.onTargetMove !== 'undefined') {
                _this.props.onTargetMove('windowResize');
            }
            _this.updatePositionAfterMove();
        };
        _this.setupScrollListener = function () {
            var target = _this.props.target;
            _this.scrollParent = getScrollParent(target);
            _this.scrollParent.addEventListener('scroll', _this.debouncedScrollUpdate, { passive: true });
        };
        _this.onScroll = function () {
            if (typeof _this.props.onTargetMove !== 'undefined') {
                _this.props.onTargetMove('targetScroll');
            }
            _this.updatePositionAfterMove();
        };
        _this.updatePositionAfterMove = function () {
            /**
             * We only want to recalculate the position of the panel IF the target is visible (within the visible viewport)
             * The reasons to restrict the the recalculation to cases when the target is visible are as follows:
             *
             * 1. If the target is not visible (ex it's been scrolled out of the viewport) and the position is recalculated, then
             * the panel content will be resized to only fit within the viewport, resulting in the content size changing even though
             * the target is no longer visible. This is different than the expected behavior of the panel scrolling out of frame with the target
             * 2. Components that consume the `Panel` and handle focus state (ie `Mulitselect`, `PopoverMenu`, etc) will exhibit strange jumping behavior
             * because of an off screen element being `focused`. This happens because to recalculate the position of the panel content, the panel is first re-rendered off screen
             * to be measured and then put back into the proper place next to it's target. If that target is offscreen and the panel content is rendered offscreen and calls focus, default
             * DOM behavior is to jump to the top of the viiewport if an off screen focused element is focused.
             */
            if (_this.props.show) {
                _this.setState({
                    visible: isScrolledElementVisible(_this.props.target, _this.scrollParent),
                }, function () { return (_this.state.visible ? window.setTimeout(_this.calculatePosition, 0) : null); });
            }
        };
        _this.content = React.createRef();
        _this.state = {
            contentStyles: getDefaultStyles(props.contentSize),
            position: null,
            visible: true,
            maxHeight: 0,
            maxWidth: 0,
        };
        _this.debouncedResizeUpdate = debounce(_this.onWindowResize, 50, false);
        _this.debouncedScrollUpdate = debounce(_this.onScroll, 50, false);
        return _this;
    }
    Panel.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.show && this.props.show && !prevProps.target && this.props.target) {
            this.setupScrollListener();
            this.calculateInitialPosition();
        }
        if (!prevProps.target && this.props.target) {
            this.setupScrollListener();
        }
        if (!prevProps.show && this.props.show) {
            this.calculateInitialPosition();
        }
        resizeEmitter.on('resize', this.debouncedResizeUpdate);
    };
    Panel.prototype.componentWillUnmount = function () {
        if (this.scrollParent) {
            this.scrollParent.removeEventListener('scroll', this.debouncedScrollUpdate);
        }
        resizeEmitter.off('scroll', this.debouncedResizeUpdate);
    };
    Panel.prototype.render = function () {
        var _a = this.props, show = _a.show, target = _a.target, panelProps = _a.panelProps;
        return show && target ? (React.createElement(Portal, { Content: this.props.PanelContent, contentProps: __assign({ ref: this.content, positionStyles: this.state.contentStyles, arrowPosition: arrowStyles[this.state.position], positionName: this.state.position, targetPosition: this.props.target.getBoundingClientRect(), ariaId: this.props.ariaId, show: this.props.show, target: this.props.target, testid: this.props.testid, role: this.props.role }, panelProps) })) : null;
    };
    return Panel;
}(React.PureComponent));
export { Panel };
