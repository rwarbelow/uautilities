import * as React from 'react';
import { cell, cellSortable, cellSorted, cellActionable, cellContentPadding, currency, text, date, arrow, addEllipsis, } from './index.module.css.js';
import classNames from '../../utilities/classnames';
import { ArrowDown, ArrowUp } from '../Icons';
var renderSortedDirection = function (sortDirection) {
    if (sortDirection) {
        if (sortDirection === 'asc') {
            return React.createElement(ArrowUp, { color: 'white', className: arrow });
        }
        else {
            return React.createElement(ArrowDown, { color: 'white', className: arrow });
        }
    }
};
var sortHandler = function (props) {
    if (props.sortable && props.onSort) {
        return props.onSort(props.columnKey, props.sortDirection);
    }
};
var renderCell = function (props) {
    if (props.cellRenderer) {
        return props.cellRenderer(props);
    }
    return (React.createElement(React.Fragment, null,
        React.createElement("p", { className: cellContentPadding }, props.label),
        props.sortable && renderSortedDirection(props.sortDirection)));
};
var cssType = function (type) {
    switch (type) {
        case 'currency':
            return currency;
        case 'text':
            return text;
        case 'date':
            return date;
        default:
            return null;
    }
};
export var TableRowHeaderCell = function (props) {
    var handleClick = function () { return sortHandler(props); };
    var handleKeyPress = function (e) {
        if (e.key === 'Enter') {
            sortHandler(props);
        }
    };
    var ellipsis = props.wrapText === false ? null : addEllipsis;
    var classes = classNames(cell, cssType(props.type), props.sortable ? cellSortable : '', props.sortDirection ? cellSorted : '', props.columnKey === 'action' ? cellActionable : '', ellipsis, props.className);
    var ariaSortValue = (props.sortDirection
        ? props.sortDirection + "ending"
        : 'none');
    return (React.createElement("th", { scope: 'col', tabIndex: props.sortable ? 0 : null, className: classes, onClick: handleClick, onKeyPress: handleKeyPress, "data-testid": '_table-header-cell', style: {
            minWidth: props.minWidth,
            maxWidth: props.maxWidth,
            width: props.width,
            flex: props.flex + " " + props.flex + " " + (props.flex / props.flexBasisMultiplier) * 100 + "%",
        }, "aria-sort": ariaSortValue }, renderCell(props)));
};
TableRowHeaderCell.defaultProps = {
    type: 'text',
    flex: 1,
};
