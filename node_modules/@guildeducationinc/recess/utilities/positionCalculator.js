// tslint:disable:max-line-length
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a;
// Problem: Given a target element and some content container,
// how we do position the conten around the target in such a way
// that maximizes the size of the content while also being bounded by the viewport
/**
 * Enum to represent outside alignment positions of content relative to a target.
 * The name is broken down to represent `{side}{alignment}`
 */
/**
 * Middle alignments align the center of the content to the center of the target
 */
//                          +----------------+
//                          |                |
//  +---------------------+ |                |
//  |                     | |                |
//  |                     | |                |
//  |                     | |                |
//  |                     | |                |
//  +---------------------+ |                |
//                          |                |
//                          +----------------+
/**
 * Top alignments align the top of the content to the top of the target
 */
// +---------------------+ +----------------+
// |                     | |                |
// |       Target        | |                |
// |                     | |                |
// |                     | |                |
// +---------------------+ |    Content     |
//                         |                |
//                         |                |
//                         |                |
//                         +----------------+
/**
 * Bottom alignments align the bottom of the content to the bottom of the target
 */
//                         +----------------+
//                         |                |
//                         |                |
// +---------------------+ |                |
// |                     | |    Content     |
// |       Target        | |                |
// |                     | |                |
// |                     | |                |
// +---------------------+ +----------------+
/**
 * Right alignments align the right side of the content to the right of the target
 */
// +---------------------+
// |                     |
// |       Target        |
// |                     |
// |                     |
// +---------------------+
//      +----------------+
//      |                |
//      |                |
//      |                |
//      |                |
//      |    Content     |
//      |                |
//      |                |
//      |                |
//      +----------------+
/**
 * Left alignments align the left side of the content to the left of the target
 */
// +---------------------+
// |                     |
// |       Target        |
// |                     |
// |                     |
// +---------------------+
// +----------------+
// |                |
// |                |
// |                |
// |                |
// |     Content    |
// |                |
// |                |
// |                |
// +----------------+
export var AlignmentPositions;
(function (AlignmentPositions) {
    AlignmentPositions["topLeft"] = "topLeft";
    AlignmentPositions["topMiddle"] = "topMiddle";
    AlignmentPositions["topRight"] = "topRight";
    AlignmentPositions["rightTop"] = "rightTop";
    AlignmentPositions["rightMiddle"] = "rightMiddle";
    AlignmentPositions["rightBottom"] = "rightBottom";
    AlignmentPositions["bottomRight"] = "bottomRight";
    AlignmentPositions["bottomMiddle"] = "bottomMiddle";
    AlignmentPositions["bottomLeft"] = "bottomLeft";
    AlignmentPositions["leftBottom"] = "leftBottom";
    AlignmentPositions["leftMiddle"] = "leftMiddle";
    AlignmentPositions["leftTop"] = "leftTop";
})(AlignmentPositions || (AlignmentPositions = {}));
var defaultPositions = Object.keys(AlignmentPositions);
/**
 * Utility method to fit a positining solution to a container so it does not overflow that container's bounds
 */
var fitContainer = function (container, _a) {
    var content = _a.position, positionName = _a.positionName;
    var bottom = Math.min(content.bottom, container.bottom);
    var top = Math.max(content.top, container.top);
    var left = Math.max(content.left, container.left);
    var right = Math.min(content.right, container.right);
    return {
        position: {
            top: top,
            bottom: bottom,
            right: right,
            left: left,
            width: Math.abs(right - left),
            height: Math.abs(top - bottom),
        },
        positionName: positionName,
    };
};
var areaCompare = function (left, right) {
    var leftArea = left.position.height * left.position.width;
    var rightArea = right.position.height * right.position.width;
    return leftArea >= rightArea ? left : right;
};
/**
 * All translations are based on how to get the content.top and content.left (variables we are solving for)
 * from 6 know variables
 * 1. target.top
 * 2. target.left
 * 3. target.height
 * 4. target.width
 * 5. content.height
 * 6. content.width
 * An example calcualtion follows and the general method can be repeated for how to get the translattion values for each position
 */
// +-----------------|---------------------------------------------------------------------------------------------------+
// |                 |                                                                                                   |
// |                 |                                        +-----------------------------+                            |
// |                 |                                        |                             |                            |
// |                 |  Target Top                            |                             |                            |
// |                 |                                        |                             |                            |
// |                 |                                        |                             |                            |
// |                 |                                        |                             |                            |
// |                 |                                        |                             |                            |
// |    Target Left  |           Target Width                 |                             |                            |
// ----------------------------------------------------------+|                             |                            |
// |                 |                                       ||                             |                            |
// |                 |                                       ||                             |                            |
// |                 |                                       ||                             |                            |
// |                 |                          Target Height||                             |                            |
// |                 |                                       ||                             | Content Height             |
// |                 |                                       ||                             |                            |
// |                 |                                       ||                             |                            |
// |                 +---------------------------------------+|                             |                            |
// |                                                          |                             |                            |
// |                                                          |                             |                            |
// |                                                          |                             |                            |
// |                                                          |                             |                            |
// |                                                          |                             |                            |
// |                                                          |                             |                            |
// |                                                          +-----------------------------+                            |
// |                                                                                                                     |
// |                                                                   Content Width                                     |
// |                                                                                                                     |
// |                                                                                                                     |
// |          Content Top = (Target Top) + 1/2 (Target Height) - 1/2 (Content Height)                                    |
// |                                                                                                                     |
// |          Content Left = (Target Left) + 1 * (Target Width) + 0 * (Content Width)                                    |
// |                                                                                                                     |
// |                                                                                                                     |
// |            {                                                                                                        |
// |                content: { y: -0.5, x: 0 },                                                                          |
// |                target:  {  y: 0.5, x: 1 }                                                                           |
// |            }                                                                                                        |
// |                                                                                                                     |
var outsidePositions = (_a = {},
    _a[AlignmentPositions.topLeft] = {
        target: { y: 0, x: 0 },
        content: { y: -1, x: 0 },
    },
    _a[AlignmentPositions.topMiddle] = {
        target: { y: 0, x: 0.5 },
        content: { y: -1, x: -0.5 },
    },
    _a[AlignmentPositions.topRight] = {
        target: { y: 0, x: 1 },
        content: { y: -1, x: -1 },
    },
    _a[AlignmentPositions.rightTop] = {
        target: { y: 0, x: 1 },
        content: { y: 0, x: 0 },
    },
    _a[AlignmentPositions.rightMiddle] = {
        target: { y: 0.5, x: 1 },
        content: { y: -0.5, x: 0 },
    },
    _a[AlignmentPositions.rightBottom] = {
        target: { y: 1, x: 1 },
        content: { y: -1, x: 0 },
    },
    _a[AlignmentPositions.bottomRight] = {
        target: { y: 1, x: 1 },
        content: { y: 0, x: -1 },
    },
    _a[AlignmentPositions.bottomMiddle] = {
        target: { y: 1, x: 0.5 },
        content: { y: 0, x: -0.5 },
    },
    _a[AlignmentPositions.bottomLeft] = {
        target: { y: 1, x: 0 },
        content: { y: 0, x: 0 },
    },
    _a[AlignmentPositions.leftBottom] = {
        target: { y: 1, x: 0 },
        content: { y: -1, x: -1 },
    },
    _a[AlignmentPositions.leftMiddle] = {
        target: { y: 0.5, x: 0 },
        content: { y: -0.5, x: -1 },
    },
    _a[AlignmentPositions.leftTop] = {
        target: { y: 0, x: 0 },
        content: { y: 0, x: -1 },
    },
    _a);
/**
 * This is the main method used to calcuate a positioning solution
 * The general method we use to calculate the position of the content is to translate
 * the content based on it's dimensions (height, width), the targets dimensions, and
 * the  target's  position.  All positions are translated based on the top left corner of the target
 */
var calculatePosition = function (target, content, positionName) {
    var multipliers = outsidePositions[positionName];
    var top = target.top + multipliers.target.y * target.height + multipliers.content.y * content.height;
    var left = target.left + multipliers.target.x * target.width + multipliers.content.x * content.width;
    var right = left + content.width;
    var bottom = top + content.height;
    return {
        position: {
            top: top,
            right: right,
            bottom: bottom,
            left: left,
            width: content.width,
            height: content.height,
        },
        positionName: positionName,
    };
};
/**
 * The main public facing API exposed to consumers. It find the best solution by finding the  largest
 * area solution based on preferred positions of the content realtive to the target
 *
 * translatePosition is a optional callback that is primarly used for adding spacing to the  positioning solution
 * For example, without any translation, the content and the  target are touching. However, in real world designs, there
 * is typically space between the target and the content. This spacing can be added after the fact by adding margins or
 * adjusting the position of the target. However, by doing this after the correct position is found means that the
 * position may actually not be optimal because this spacing was not taken into account in the intital calcualtion.
 * This function serves as a means to translate the target BEFORE any positioning calcuation is done, meaning that
 * the solution that is found takes into account any padding/spacing around the target/content that may be desired.
 *
 * A real world example of this is our popover and tooltip. Both have target/conten spacing of 4px PLUS the height
 *  of the the arrow (12px). In this case, we want to translate the content by 16px before the position is calculated
 * so that we take into account this extra padding
 */
var getPosition = function (target, content, container, positions, translatePosition) {
    if (positions === void 0) { positions = defaultPositions; }
    return positions.reduce(function (currentSolution, positionName) {
        var translatedTarget = translatePosition ? translatePosition(positionName, target) : target;
        var result = fitContainer(container, calculatePosition(translatedTarget, content, positionName));
        if (result.position.top > result.position.bottom ||
            result.position.left > result.position.right) {
            return currentSolution;
        }
        return currentSolution ? areaCompare(currentSolution, result) : result;
    }, null);
};
/**
 * element.getBoundingClientRect() returns top and left coordinates relative to the viewport.
 * (equavalent to clientX, clientY)
 * To be able to use css `position: absolute`, we need to translate those coordinates to be
 * relative to the HTML document (pageX, pageY). One advantage of this is that is we position
 * the content relative to the page, then the content will move with the target if the page scrolls.
 *
 * This method is a translation between clientX/Y and pageX/Y
 */
export var mapPositionToPage = function (solution) {
    /**
     * Fixes an issue with Safari where `window.scrollTop/scrollLeft` always returns 0, regardless of how much the page has
     * been scrolled
     */
    var scrollTop = Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);
    var scrollLeft = Math.max(window.pageXOffset, document.documentElement.scrollLeft, document.body.scrollLeft);
    var adjustX = function (pixels) { return scrollLeft + pixels; };
    var adjustY = function (pixels) { return scrollTop + pixels; };
    return __assign(__assign({}, solution), { top: adjustY(solution.top), bottom: adjustY(solution.bottom), right: adjustX(solution.right), left: adjustX(solution.left) });
};
export { getPosition };
